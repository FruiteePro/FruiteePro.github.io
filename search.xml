<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>游记 ｜ 成都</title>
      <link href="/2022/06/22/%E6%88%90%E9%83%BD%E6%B8%B8%E8%AE%B0/"/>
      <url>/2022/06/22/%E6%88%90%E9%83%BD%E6%B8%B8%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>2022年6月15日，我们乘坐航班从南京抵达了成都天府机场。</p><p>天府机场在四川省简阳市，离我们的目的地成都还有相当长的一段距离。下飞机后我们乘上了一辆接驳车，来到曾经接驳车的停靠位的外面：这里现在已经由无数隔离带，标示牌和入站的旅客塞满了。扫过入川码做过核酸，我们进入了天府机场的候机厅。说实话这么多人在这里挤来挤去，做不做核酸意义不大，有一个感染者大家全都寄了。</p><p>天府机场到成都市中心的天府广场要乘坐一个多小时的地铁。这段路程枯燥又无聊，我还背着沉重的行李，每时每刻都在期待着下一秒就能到达目的地。</p><p>成都的天气还是不错，从我们到达的第一天起，没有下过大雨，也少有天晴日丽，每天都是阴阴沉沉，很适合户外活动。因为不是自己一个人出来玩，所以并不能选择到什么偏僻的地方去，大伙可能更想体验成都的现代化而非历史或者民俗什么的。在成都游玩的这几天我也能感受到，我被同行的几位同学称作“遛弯侠”，而我只是希望能在路途中走过更多地方，看看那里是什么样子的。同行的同学似乎并不这么想，只想快点乘地铁回我们住的民宿附近找点东西吃。我想以后旅行最好还是自己或者和有共同兴趣的人一起。</p><p>在6月21号离开以前，我们其实并没有去多少成都的景点，第一天去成华区转了转；第二天去了大熊猫繁殖基地，傍晚去了锦里；第三天早上和铁姐碰了面，然后去杜甫草堂和四川省博物院，傍晚简单去了一下人民公园，我和铁姐又逛了成都博物馆，晚上在宽窄巷子吃了点东西；第四天下午继续和铁姐逛成都博物馆；第五天去了都江堰和青城山，没到老君阁就因为记错了缆车的时间而返回了。可以说这次旅行并没有完全达到我的预期，去过的地方有点少。但也好，给我下次造访成都留个理由。</p><p>成都的现代化设施修建得还是十分不错的，看起来比南京繁华多了。最让我震惊的是天府广场下那几条隧道，从市中心穿过，里面甚至跑出来了载着挖掘机的卡车。成都的开放和包容也让我记忆尤深，市中心能看到推车卖瓜的爷爷，挑着扁担卖什么糖的大叔，摩天大楼下路边一排排的桌椅，坐满了顾客，到夜里十一点也依旧人声鼎沸。这一切都让我觉得十分不可思议，原来一座繁华的城市可以有如此强的市井气息。我能感受到生活在这里的人们是多么得安逸且自由。我开始羡慕这里的人们。</p><p>而与此形成对比的是，成都的历史向来是苦难的，经历过无处次大规模的战乱，千百年来迁入成都平原的百姓难以计算，也许这就是造成成都如此下里巴人的原因吧。不同的文化在此交融碰撞，最终又形成了一种独特的文化。她是如此的令人着迷，引入入胜，可以说我已经完全折服于她的脚下了。</p><p>我很喜欢成都，因为这里的美食很和我口味，因为这里的人们善良而朴实，因为城市繁华而平易近人。我喜欢这里安逸的生活，不用像东南沿海那样，每天都疲于奔命。其实在成都疲于奔命也可以，可以在忙碌的间隙中享受安逸的氛围。来过成都才知道这里为什么是天府之国，我只能说名副其实。</p><p>成都很适合生活。这里物价更低，房价也更低，虽然工资也更低，但生活在这里，幸福感会更高，虽然只住了几天，我还是能感受到强烈的幸福。我很向往这座城市。我期待着下一次与她重逢。</p><p>离开成都的时候，我们来到了火车北站。看到这破败的候车大厅，里面挤满了形形色色的旅客，我有点恍惚，想起小时候京沈线上年年关内外迁徙的记忆。过了二十年，这样的景象依然在这片土地上发生着。我不知道应该高兴还是难过。我只希望记忆中那种火车上的令人难忘的经历不会出现在今天的孩子的记忆中了。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 游记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>踩坑日记 | algs4.jar 包的配置</title>
      <link href="/2021/10/31/%E8%B8%A9%E5%9D%91%E6%97%A5%E8%AE%B0%20%20algs4.jar%20%E5%8C%85%E7%9A%84%E9%85%8D%E7%BD%AE/"/>
      <url>/2021/10/31/%E8%B8%A9%E5%9D%91%E6%97%A5%E8%AE%B0%20%20algs4.jar%20%E5%8C%85%E7%9A%84%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="踩坑日记-algs4-jar-包的配置"><a href="#踩坑日记-algs4-jar-包的配置" class="headerlink" title="踩坑日记 | algs4.jar 包的配置"></a>踩坑日记 | algs4.jar 包的配置</h1><p>2021-10-31</p><p>笔者最近在看 <code>Algorithms (Fourth Edition)</code> 这本书，想做一下练习，于是开始配这本书写的环境。这书的练习都是 <code>Java</code>写的，需要调用一些作者自己写的类。作者在官网上给出了已经包括全部类的 <code>jar</code> 包，然而笔者发现导入之后并不能用，一直报错，属实折磨，在网上找到的资料也并不能解决笔者遇到的问题。最后还是参考作者在网站上写的内容稍加修改解决了。</p><hr><h1 id="下载-algs4-jar"><a href="#下载-algs4-jar" class="headerlink" title="下载 algs4.jar"></a><strong>下载 algs4.jar</strong></h1><p>访问 <code>Algorithms</code> 这本书的<a href="https://algs4.cs.princeton.edu/home/">官网</a>，在左侧的导航栏选择 Code 页面。</p><p>一直下滑，直到找到高亮的 <code>algs4.jar</code> ，点击超链接即可下载。</p><p>下载好后要将得到的 <code>algs4.jar</code> 放在指定目录下，官网给出的目录为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/lift/lib/algs4.jar</span><br></pre></td></tr></table></figure><p>这个是使用作者提供的自动安装工具下载的目录。考虑到境外网站一向不稳定，笔者并没有安装和使用这个工具。</p><p>笔者下载完毕 <code>algs.jar</code> 后，将其放在的目录为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/Users/<span class="string">&quot;yourUserName&quot;</span>/Library/Java/Extensions/algs4.jar</span><br></pre></td></tr></table></figure><p>没有文件夹的其实可以新建一个。</p><h1 id="配置-IDEA-环境"><a href="#配置-IDEA-环境" class="headerlink" title="配置 IDEA 环境"></a><strong>配置 IDEA 环境</strong></h1><p>打开 IDEA，新建一个项目。笔者这里新建的项目中的文件为 <code>Test.java</code> 。</p><p>点击顶部的 <code>File</code> 选项卡，在下拉菜单中点击 <code>Project Structure</code> 。</p><p>点击 <code>Library</code> 选项卡，选择加号，<code>New Project Library</code> 。在目录中找到 <code>algs4.jar</code> 并选中，添加成功后选择 <code>Apply</code> 和 <code>OK</code> 确认。</p><p>在右上角调整好正确的 <code>Run/Debug Configuration</code> 。此时在 <code>Test.java</code> 中写入以下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> edu.princeton.cs.algs4.*;</span><br></pre></td></tr></table></figure><p>如果没有报错，即配置成功。</p><p>但是到这里程序依然是无法运行的，因为我们需要在命令行对程序进行编译和运行。如果此时直接在命令行输入 <code>javac Test.java</code> 进行编译，会有以下报错：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">import edu.princeton.cs.algs4.*;</span><br><span class="line">^</span><br><span class="line">Test.java:6: 错误: 找不到符号</span><br><span class="line">        Point2D[] ps = new Point2D[N];</span><br><span class="line">        ^</span><br><span class="line">  符号:   类 Point2D</span><br><span class="line">  位置: 类 Test</span><br><span class="line">Test.java:6: 错误: 找不到符号</span><br><span class="line">        Point2D[] ps = new Point2D[N];</span><br><span class="line">                           ^</span><br><span class="line">  符号:   类 Point2D</span><br><span class="line">  位置: 类 Test</span><br><span class="line">Test.java:9: 错误: 找不到符号</span><br><span class="line">            double x = StdRandom.uniform();</span><br><span class="line">                       ^</span><br><span class="line">  符号:   变量 StdRandom</span><br><span class="line">  位置: 类 Test</span><br><span class="line">Test.java:10: 错误: 找不到符号</span><br><span class="line">            double y = StdRandom.uniform();</span><br><span class="line">                       ^</span><br><span class="line">  符号:   变量 StdRandom</span><br><span class="line">  位置: 类 Test</span><br><span class="line">Test.java:11: 错误: 找不到符号</span><br><span class="line">            ps[i] = new Point2D(x, y);</span><br><span class="line">                        ^</span><br><span class="line">  符号:   类 Point2D</span><br><span class="line">  位置: 类 Test</span><br><span class="line">6 个错误</span><br></pre></td></tr></table></figure><p>所以需要继续配置 <code>zsh</code> 。</p><h1 id="配置-zsh-环境变量"><a href="#配置-zsh-环境变量" class="headerlink" title="配置 zsh 环境变量"></a><strong>配置 zsh 环境变量</strong></h1><p>其实这里可以不配置环境变量，不过每次命令行编译都需要输入以下一大长串。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ javac -<span class="built_in">cp</span> .:/Users/<span class="string">&quot;yourUserName&quot;</span>/Library/Java/Extensions/algs4.jar Test.java</span><br><span class="line"></span><br><span class="line">$ java -<span class="built_in">cp</span> .:/Users/<span class="string">&quot;yourUserName&quot;</span>/Library/Java/Extensions/algs4.jar Test</span><br></pre></td></tr></table></figure><p>这可真是太不方便了。虽然可以自己写个脚本，但还是很麻烦。根据作者官网的说明，可以配置一下环境变量，然而作者写的说明并不包括 <code>zsh</code> 的配置。所以这里笔者给出 <code>zsh</code> 的配置说明。</p><p>将以下代码加入到文件 <code>~/.zshrc</code> 中（如果没有就自己建一个）。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> CLASSPATH=<span class="variable">$CLASSPATH</span>:/Users/<span class="string">&quot;yourUserName&quot;</span>/Library/Java/Extensions/algs4.jar</span><br></pre></td></tr></table></figure><blockquote><p>这里的 <code>algs.jar</code> 的路径要写对。如果你一直按照我的说明来，那就是这个路径。如果你有自己的想法，那写你自己的路径。</p></blockquote><p>配置完成后，在 <code>Test.java</code> 文件目录中打开终端，输入以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ javac Test.java</span><br><span class="line"></span><br><span class="line">$ java Test</span><br></pre></td></tr></table></figure><p>如果没有报错，成功运行，那么恭喜你，配置完成。</p>]]></content>
      
      
      
        <tags>
            
            <tag> macOS </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>M1 Mac 安装 Java</title>
      <link href="/2021/10/30/M1%20Mac%20%E5%AE%89%E8%A3%85%20Java/"/>
      <url>/2021/10/30/M1%20Mac%20%E5%AE%89%E8%A3%85%20Java/</url>
      
        <content type="html"><![CDATA[<h1 id="M1-Mac-安装-Java"><a href="#M1-Mac-安装-Java" class="headerlink" title="M1 Mac 安装 Java"></a>M1 Mac 安装 Java</h1><p>2021-10-30</p><p>最近要重新用一下 Java ，本来电脑里是有一个的，奈何发现 javac 用不了了，查了一下也没搞清楚为啥，总之直接重装了一个，正好换了个版本。为了防止下次再出现类似于忘了去哪找安装包的事情，笔者决定还是写下来，毕竟好记性不如烂笔头（也许应该说好记性不如烂键盘？）。</p><hr><h1 id="卸载已有-JDK"><a href="#卸载已有-JDK" class="headerlink" title="卸载已有 JDK"></a><strong>卸载已有 JDK</strong></h1><p>众所周知，Mac 环境里是可以安装多个 JDK 的。</p><p>打开终端，输入以下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls /Library/Java/JavaVirtualMachines/</span><br></pre></td></tr></table></figure><p>然后就可以看见电脑上安装的 JDK 版本。</p><p>卸载 JDK 就很简单，在终端继续输入命令：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo rm -rf /Library/Java/JavaVirtualMachines/jdk1<span class="number">.7</span><span class="number">.0</span>_79.jdk</span><br><span class="line"></span><br><span class="line"><span class="comment">//最后 JDK 名字替换成刚才找到的，这里是个例子</span></span><br></pre></td></tr></table></figure><p>继续输入密码，即可成功删除。</p><p>可以在终端输入指令 <code>java -version</code> 来检查是否成功卸载。</p><h1 id="安装新的-JDK"><a href="#安装新的-JDK" class="headerlink" title="安装新的 JDK"></a><strong>安装新的 JDK</strong></h1><p>目前支持 <code>M1</code> 芯片 有 <code>Zulu JDK</code> ，<a href="https://www.azul.com/downloads/?version=java-11-lts&os=macos&architecture=arm-64-bit&package=jdk">下载网址</a>。</p><p>在网页中点击 <code>Choose Your Download</code> ，进入下个页面，选择你希望有的配置。下个 <code>dmg</code> 版本就挺好的。</p><p>下载好后安装，走完步骤。</p><p>检查是否安装成功的方法和检查是否删除成功的一样，在终端输入指令 <code>java -version</code> 即可。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ java -version</span><br><span class="line"></span><br><span class="line">openjdk version <span class="string">&quot;11.0.13&quot;</span> <span class="number">2021</span>-<span class="number">10</span>-<span class="number">19</span> LTS</span><br><span class="line"></span><br><span class="line">OpenJDK Runtime Environment Zulu11.<span class="number">52</span>+<span class="number">13</span>-<span class="title function_ invoke__">CA</span> (build <span class="number">11.0</span>.<span class="number">13</span>+<span class="number">8</span>-LTS)</span><br><span class="line"></span><br><span class="line">OpenJDK <span class="number">64</span>-Bit Server VM Zulu11.<span class="number">52</span>+<span class="number">13</span>-<span class="title function_ invoke__">CA</span> (build <span class="number">11.0</span>.<span class="number">13</span>+<span class="number">8</span>-LTS, <span class="keyword">mixed</span> mode)</span><br></pre></td></tr></table></figure><p>这就算成功了。</p><p><code>Zulu JDK</code> 默认安装在 <code>/Library/Java/JavaVirtualMachines</code> 目录下。</p><hr><p>到这差不多也就完事了，现在能用了。</p>]]></content>
      
      
      
        <tags>
            
            <tag> M1 </tag>
            
            <tag> macOS </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GitHub_Pages + hexo 搭建个人博客</title>
      <link href="/2021/10/25/GitHub_Pages%20+%20hexo%20%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
      <url>/2021/10/25/GitHub_Pages%20+%20hexo%20%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h1 id="GitHub-Pages-hexo-搭建个人博客"><a href="#GitHub-Pages-hexo-搭建个人博客" class="headerlink" title="GitHub_Pages + hexo 搭建个人博客"></a>GitHub_Pages + hexo 搭建个人博客</h1><p>2021-10-25</p><p>本文只是简单记录一下笔者在使用 hexo 框架搭建个人博客时的操作过程和遇到的一些问题。由于笔者水平有限，遇到困难全靠百度和摆烂，所以本文纯属娱乐，八成是没什么用的。如果真的能给你带来一些帮助，笔者不胜荣幸。</p><p>笔者运行环境</p><ul><li>macOS Big Sur 11.6</li></ul><hr><h1 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a><strong>前期准备</strong></h1><h2 id="创建-GitHub-仓库"><a href="#创建-GitHub-仓库" class="headerlink" title="创建 GitHub 仓库"></a><strong>创建 GitHub 仓库</strong></h2><p>在 GitHub 创建一个新的 <code>repository</code>，名字命名为以下格式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;yourGithubName&quot;.github.io</span><br></pre></td></tr></table></figure><p>设置为公共仓库，其他设置默认即可。</p><h2 id="在本地配置git"><a href="#在本地配置git" class="headerlink" title="在本地配置git"></a><strong>在本地配置git</strong></h2><p>在本地安装好 git 工具，在 macOS 上的安装方法为在终端输入以下命令：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>brew install git </span><br></pre></td></tr></table></figure><p>如果 brew 命令无效，则需要安装 brew，具体方法可以百度，在此不进行赘述。</p><p>也有其他的方式来安装 git，可以去百度上探索一下。</p><h2 id="在本地安装-Node-js"><a href="#在本地安装-Node-js" class="headerlink" title="在本地安装 Node.js"></a><strong>在本地安装 Node.js</strong></h2><p>Node.js 为 macOS 提供了官方的安装程序，在 Node.js 的<a href="http://nodejs.cn/download">官网下载页面</a>上即可下载。</p><h2 id="在本地安装-hexo"><a href="#在本地安装-hexo" class="headerlink" title="在本地安装 hexo"></a>在本地安装 hexo</h2><p>打开终端，输入以下命令：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>npm install -g hexo-cli </span><br></pre></td></tr></table></figure><p>安装好后，可以用以下命令执行hexo</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">npx hexo &lt;<span class="built_in">command</span>&gt;</span> </span><br></pre></td></tr></table></figure><p>如果想省略 npx 前缀，需要讲 hexo 目录下的 node_modules 添加到环境变量中。笔者比较懒，没有搞，可以参考 hexo 官方文档中的方法。</p><p>另外，hexo 官方文档中也写明了 hexo 对 node.js 的版本限制。</p><blockquote><p>若在这里如果出现以下错误</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="variable constant_">ERR</span>! <span class="title class_">Error</span>: <span class="attr">EACCES</span>: permission denied, access <span class="string">&#x27;/usr/lib/node_modules&#x27;</span></span><br><span class="line"></span><br><span class="line">npm <span class="variable constant_">ERR</span>! &#123; <span class="title class_">Error</span>: <span class="attr">EACCES</span>: permission denied, access <span class="string">&#x27;/usr/lib/node_modules&#x27;</span></span><br><span class="line"></span><br><span class="line">npm <span class="variable constant_">ERR</span>!  <span class="attr">stack</span>: <span class="string">&#x27;Error: EACCES: permission denied, access \&#x27;/usr/lib/node_modules\&#x27;&#x27;</span>,</span><br><span class="line"></span><br><span class="line">npm <span class="variable constant_">ERR</span>!  <span class="attr">errno</span>: -<span class="number">13</span>,</span><br><span class="line"></span><br><span class="line">npm <span class="variable constant_">ERR</span>!  <span class="attr">code</span>: <span class="string">&#x27;EACCES&#x27;</span>,</span><br><span class="line"></span><br><span class="line">npm <span class="variable constant_">ERR</span>!  <span class="attr">syscall</span>: <span class="string">&#x27;access&#x27;</span>,</span><br><span class="line"></span><br><span class="line">npm <span class="variable constant_">ERR</span>!  <span class="attr">path</span>: <span class="string">&#x27;/usr/lib/node_modules&#x27;</span> &#125;</span><br></pre></td></tr></table></figure><p>则可以用以下方法解决，在命令行中依次输入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">mkdir</span> ~/.npm-global</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">npm config <span class="built_in">set</span> prefix <span class="string">&#x27;~/.npm-global&#x27;</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">export</span> PATH=~/.npm-global/bin:<span class="variable">$PATH</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">npm install -g hexo</span></span><br></pre></td></tr></table></figure></blockquote><h2 id="GitHub-的一系列设置"><a href="#GitHub-的一系列设置" class="headerlink" title="GitHub 的一系列设置"></a><strong>GitHub 的一系列设置</strong></h2><h3 id="1-生成-ssh-key"><a href="#1-生成-ssh-key" class="headerlink" title="1. 生成 ssh key"></a><strong>1. 生成 ssh key</strong></h3><p>macOS 是自带 ssh 的，因此不用安装。在此只要生成本机的 ssh key 即可。</p><p>打开终端，输入以下命令：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>ssh-keyget -t rsa -C <span class="string">&quot;yourMailAddress&quot;</span> </span><br></pre></td></tr></table></figure><p>执行后按四次回车，不用输入任何命令。</p><p>在用户根目录下显示隐藏文件，找到 <code>.ssh</code> 文件，打开 <code>id_rsa.pub</code>，复制其内容至剪切板。</p><blockquote><p>macOS 下显示隐藏文件方法为 shift + command + 。</p></blockquote><h3 id="2-设置-GitHub-SSH-Keys"><a href="#2-设置-GitHub-SSH-Keys" class="headerlink" title="2. 设置 GitHub SSH Keys"></a><strong>2. 设置 GitHub SSH Keys</strong></h3><p>打开 GitHub 网站，进入 <code>Settings</code>，选择 <code>SSH and GPG keys</code> 选项卡。</p><p>在 <code>Title</code> 中输入你想要的称呼，将剪切板中的内容复制到 <code>key</code> 中。</p><p>点击 <code>Add SSH key</code> 按钮。</p><p>回到终端，在终端中输入以下命令：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>ssh -T git<span class="variable">@github</span>.com </span><br></pre></td></tr></table></figure><h2 id="安装自动部署发布工具"><a href="#安装自动部署发布工具" class="headerlink" title="安装自动部署发布工具"></a><strong>安装自动部署发布工具</strong></h2><p>打开终端，输入以下命令：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-deployer-git <span class="comment">--save</span></span><br></pre></td></tr></table></figure><p>安装完毕即可。</p><hr><h1 id="本地建站"><a href="#本地建站" class="headerlink" title="本地建站"></a><strong>本地建站</strong></h1><h2 id="hexo-生成文件"><a href="#hexo-生成文件" class="headerlink" title="hexo 生成文件"></a><strong>hexo 生成文件</strong></h2><p>设置好以上内容后，在你想要的位置新建一个文件夹，在文件夹中打开终端，输入以下命令：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npx hexo <span class="keyword">init</span> </span><br></pre></td></tr></table></figure><p>hero 将会在终端所在的文件夹中新建所需要的文件。</p><p>新建完成后，指定文件夹的目录如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── _config.yml</span><br><span class="line">├── package.json</span><br><span class="line">├── scaffolds</span><br><span class="line">├── <span class="built_in">source</span></span><br><span class="line">|   ├── _drafts</span><br><span class="line">|   └── _posts</span><br><span class="line">└── themes</span><br></pre></td></tr></table></figure><p>在终端输入以下命令可以生成页面：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>npx hexo g </span><br></pre></td></tr></table></figure><p>在终端输入以下命令可以在本地服务器进行预览：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>npx hexo s </span><br></pre></td></tr></table></figure><p>打开浏览器，输入 <code>localhost:4000</code> 即可看到博客的预览。</p><blockquote><p>如果 hexo s 命令有以下报错：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">TypeError</span>: <span class="title class_">Cannot</span> read property <span class="string">&#x27;utcOffset&#x27;</span> <span class="keyword">of</span> <span class="literal">null</span></span><br></pre></td></tr></table></figure><p>说明你和笔者一样手欠，在 <code>_config.yml</code> 文件中将时区 <code>timezone</code> 改成了什么乱七八糟的地方。重新改成<code> Asia/Shanghai</code>就解决了。</p></blockquote><h2 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a><strong>修改配置文件</strong></h2><p>打开 <code>_config.yml</code> 文件，在最后添加以下内容：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line"></span><br><span class="line">    <span class="built_in">type</span>: git</span><br><span class="line"></span><br><span class="line">    repo: https://github.com/<span class="string">&quot;yourGithubName&quot;</span>/<span class="string">&quot;yourGithubName&quot;</span>.github.<span class="built_in">io</span>.git</span><br><span class="line"></span><br><span class="line">    branch: main </span><br></pre></td></tr></table></figure><blockquote><p>这里注意一定缩进要打满4个空格，英文冒号后面也要跟一个空格</p></blockquote><p>修改完毕后保存。</p><blockquote><p>这里你可以自己捣鼓一下，找一个现成的主题或者自己写一个主题。具体的美化工作就看你的想法了。hexo 的一系列操作可以参考 hexo 的<a href="https://hexo.io/zh-cn/docs/">官方文档</a>。</p></blockquote><hr><h1 id="部署-GitHub-pages"><a href="#部署-GitHub-pages" class="headerlink" title="部署 GitHub pages"></a><strong>部署 GitHub pages</strong></h1><h2 id="在-GitHub-上申请令牌"><a href="#在-GitHub-上申请令牌" class="headerlink" title="在 GitHub 上申请令牌"></a><strong>在 GitHub 上申请令牌</strong></h2><p>打开 GitHub 上的 <code>Settings</code>，选择 <code>Developer settings</code> 选项卡，然后选择 <code>Personnal access tokens</code> 选项卡。</p><p>点击 <code>Generate new token</code> 按钮，输入密码。</p><p>在新建令牌页面中选择所有的权限（其实不用全选，但是笔者懒得挑了）。</p><p>点击生成令牌，在接下来的页面中截图或者复制得到的令牌，令牌只会出现一次，一定要记住。</p><h2 id="将博客部署到-GitHub-上"><a href="#将博客部署到-GitHub-上" class="headerlink" title="将博客部署到 GitHub 上"></a><strong>将博客部署到 GitHub 上</strong></h2><p>在存有本地页面的文件夹中打开终端，输入以下命令：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>npx hexo g</span><br><span class="line"></span><br><span class="line"><span class="variable">$ </span>npx hexo d </span><br></pre></td></tr></table></figure><p>依次输入 GitHub 的用户名和申请的令牌。</p><blockquote><p>这里经常会失败，GitHub 的网站在国内还是8太行</p></blockquote><p>成功之后，我们所有的工作就基本完成了，打开博客的仓库，点击 <code>Settings</code>，找到 <code>Pages</code> 选项卡，点击确认，博客就在 GitHub 上成功发布了。博客的网址就是仓库的名称，即<code>https://“yourGithubName&quot;.github.io</code>。</p><hr><h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a><strong>最后</strong></h1><p>写到这里这篇文章也就结束了，笔者只是记录一下自己搭建个人博客的一个过程，以后也会在这个博客上继续分享个人的学习经历。如果你感兴趣的话，欢迎持续关注。</p>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> GitHub_Pages </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
