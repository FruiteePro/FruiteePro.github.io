<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>C++选手秋招总结</title>
      <link href="/2024/11/29/C++%E9%80%89%E6%89%8B%E7%A7%8B%E6%8B%9B%E6%80%BB%E7%BB%93/"/>
      <url>/2024/11/29/C++%E9%80%89%E6%89%8B%E7%A7%8B%E6%8B%9B%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文最早发表于<a href="https://www.nowcoder.com/discuss/690644101712154624">牛客</a>，自认为写得颇为用心，因此将其转载到个人博客。</p></blockquote><p>秋招进行到现在终于能写总结了。完全没想到战线会拉这么长，过程会如此狼狈，不过更应该怪自己太菜了。好在所有的运气都用在了最后，也是有个去处。</p><p>背景：双2本硕科班，无竞赛，本科一段研究所实习，硕士一段大厂暑期实习但无转正。技术栈是C++ &amp; Golang，实习是客户端音视频（而且是鸿蒙端开发），简历两个C++项目一个Golang项目</p><p>主要投递岗位：后端，cpp软开，游戏服务端，测开，以及一些不拘泥于Java的岗位</p><p>从8月起总共投递123家公司，笔试数不清了，约面大约30家</p><p>offer&#x2F;oc&#x2F;意向：<br>友塔游戏（第一个offer，面试体验很好，就是给钱好少<br>南瑞继保（计算机科班点击就送，不少同学签了<br>万得Wind（听说wlb，但是风评很差<br>深信服（感谢最佳雇主开出来的仨瓜俩枣<br>吉比特&#x2F;雷霆游戏（工具链开发，工作强度wlb，就是钱不多<br>中兴（AI相关，但钱少还pua，约面巨晚，一直问我能不能接受996<br>作业帮（核心部门，面试体验还行，但最后开出来个烂白菜<br>OPPO（岗位还行，但是不想去<br>荣耀（本来南京base，给我转到深圳了，而且hr态度巨差<br>金山（珠海很有性价比，hr说965，薪资可以接受<br>携程（非业务部门，工作强度听说不高</p><p>泡池子：<br>虾皮（超级无敌大池子<br>华为（同上。本来一志愿上海，但是被部门捞到南京base，一开始以为是好事，后来发现其实是被坑了，接口人还问啥都说不知道，被气晕</p><p>各种挂：<br>陌陌池子泡死（估计是hr面说错话了吧<br>字节八面挂（两次三面排序挂，化身字节黑子<br>拓竹二面完无消息（公司体量小，招人可能不多<br>腾讯一面挂<br>美团一面挂<br>快手一面挂<br>帆软一面挂<br>小米一面挂<br>网易互娱一面挂<br>招行信用卡中心一面完无消息</p><p>还有一些零零散散kpi面，以及约面被我拒了的</p><p>最后再写点总结，就稍微随意一点，想到哪就写到哪了</p><p>关于能不能学cpp：</p><p>如果能重来一次，我一定一定不会选cpp这条道路了（笑）。虽然我真的蛮喜欢cpp这门编程语言的，但是它真的不适合找工作。过往陈述cpp不好找工作的帖子数不胜数，我在暑期实习总结里也吐槽过了，希望各位即将面临秋招季的同学及时听劝，不要被某些流量大v忽悠。学个cpp冲后端放在几年前也许是捷径，但如今就业寒潮下没有快速通道，想走后端还是老老实实学Java或者Golang。cpp不是后端语言，只学个cpp最终的归宿可能就是翻车干到客户端（牛客有多少个“客户端劝退第x人”就不用我多说了吧）。</p><p>个人认为学cpp适合以下几种人：想走游戏客户端&#x2F;引擎&#x2F;服务端开发的，想走QT开发的，想走嵌入式软开的，想进军工研究所的，想就靠学历进学历厂的（byd，华为，中兴，荣耀，tp等等），在某些特定领域（高性能计算，图形学，数据库研发，操作系统内核研发等等）很有建树的组里读研做过项目&#x2F;发过论文的，以及完全没时间准备秋招的（不得不学了）。</p><p>关于找暑期实习：</p><p>我的个人经验是，暑期实习还是建议去一个转正机会大的厂。当初拿了鹅厂的暑期实习的我很高兴，拒了不少别的公司，但最后转正寄了，直接成为小丑🤡。此时有不少同学当初找的实习虽然不如我，但纷纷转正，拿到了保底offer，整得我心态有点小爆炸。其实暑期实习是一个快速拿offer的机会，拿到保底，然后再用这段经历去冲击大厂，这样的策略应该会更稳妥一些。</p><p>关于秋招投递简历的时间：</p><p>秋招比较后悔的一件事就是八月初的时候没有投简历，因为那时候还在实习，想着没啥时间准备秋招。然而这一波没投感觉错失了很多机会。结论就是秋招投简历的时间还是要越早越好，那时候各个大厂hc比较充足，运气好的话一波就直接拿下了。越到后面，hc发的差不多了，面试难度会更高。</p><p>关于逼签三方：</p><p>逼签三方真的是秋招期间碰到的最恶心的事情之一（其余的还有测评、kpi面以及泡池子）。三方保护学校就业率，保护企业稳定招人，唯独不保护学生选择工作的权利。逼签三方的公司真就是一点都没把学生当成自己未来的员工，而是当成呼之即来的牛马，要是再拖毁约流程就真的恶心到家了（说的就是你荣耀）。但被逼签作为学生真的也没什么办法，尤其是在等后面可能有更好的工作机会的时候。荣耀逼签的时候我真的心情十分痛苦，不想就这么签了，但又怕后面的机会开不出来，最后还是把荣耀拒了。好在后面开出来了更满意的offer，不然真就寄了。</p><p>最后一点碎碎念：</p><p>个人认为秋招有三样东西最重要：实力，运气，以及最重要的，努力下去的决心。秋招不是考试，看不到排名，也没有进度条，没人知道这烂透了的日子的终点究竟在哪。oc电话可能是下一秒打过来，但也可能是一个月之后。每个人的进度也不一样，有些人可能没怎么准备也能找到了很好的工作，有些人可能要苦苦支撑很久，最后工作依旧不理想。so和其他人比较是没有意义的，只能尽自己所能，准备好每一场面试，不放过任何一个机会。实力与你接近的人有很多很多，大部分人运气也好不到哪里去，作为秋招浪潮里微不足道的一个个体，我们能做的只有继续下去，努力面试，努力生活。摆烂当然也可以，但万一再努力一点就有梦寐以求的机会了呢？</p><p>不过话又说回来，就算没能拿到理想的工作，人生也不是到这里就开始结算排rank的。这仅仅是一个阶段性的结果，以后的日子还长，各位还有广阔天地大有可为，不用纠结于一次秋招的得失。若干年之后遇到更好的机会应该是大概率事件。</p><p>最后，感谢看我讲这么多废话的牛u们，感谢朋友们一直以来对我的帮助和支持，感谢牛客这个平台给了我和相同境遇的朋友们相遇的机会。</p><p>祝所有的朋友们都能得偿所愿，拿到自己满意的offer。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++选手秋招总结</title>
      <link href="/2024/11/29/2024%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
      <url>/2024/11/29/2024%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文最早发表于<a href="https://www.nowcoder.com/discuss/690644101712154624">牛客</a>，自认为写得颇为用心，因此将其转载到个人博客。</p></blockquote><p>秋招进行到现在终于能写总结了。完全没想到战线会拉这么长，过程会如此狼狈，不过更应该怪自己太菜了。好在所有的运气都用在了最后，也是有个去处。</p><p>背景：双2本硕科班，无竞赛，本科一段研究所实习，硕士一段大厂暑期实习但无转正。技术栈是C++ &amp; Golang，实习是客户端音视频（而且是鸿蒙端开发），简历两个C++项目一个Golang项目</p><p>主要投递岗位：后端，cpp软开，游戏服务端，测开，以及一些不拘泥于Java的岗位</p><p>从8月起总共投递123家公司，笔试数不清了，约面大约30家</p><p>offer&#x2F;oc&#x2F;意向：<br>友塔游戏（第一个offer，面试体验很好，就是给钱好少<br>南瑞继保（计算机科班点击就送，不少同学签了<br>万得Wind（听说wlb，但是风评很差<br>深信服（感谢最佳雇主开出来的仨瓜俩枣<br>吉比特&#x2F;雷霆游戏（工具链开发，工作强度wlb，就是钱不多<br>中兴（AI相关，但钱少还pua，约面巨晚，一直问我能不能接受996<br>作业帮（核心部门，面试体验还行，但最后开出来个烂白菜<br>OPPO（岗位还行，但是不想去<br>荣耀（本来南京base，给我转到深圳了，而且hr态度巨差<br>金山（珠海很有性价比，hr说965，薪资可以接受<br>携程（非业务部门，工作强度听说不高</p><p>泡池子：<br>虾皮（超级无敌大池子<br>华为（同上。本来一志愿上海，但是被部门捞到南京base，一开始以为是好事，后来发现其实是被坑了，接口人还问啥都说不知道，被气晕</p><p>各种挂：<br>陌陌池子泡死（估计是hr面说错话了吧<br>字节八面挂（两次三面排序挂，化身字节黑子<br>拓竹二面完无消息（公司体量小，招人可能不多<br>腾讯一面挂<br>美团一面挂<br>快手一面挂<br>帆软一面挂<br>小米一面挂<br>网易互娱一面挂<br>招行信用卡中心一面完无消息</p><p>还有一些零零散散kpi面，以及约面被我拒了的</p><p>最后再写点总结，就稍微随意一点，想到哪就写到哪了</p><p>关于能不能学cpp：</p><p>如果能重来一次，我一定一定不会选cpp这条道路了（笑）。虽然我真的蛮喜欢cpp这门编程语言的，但是它真的不适合找工作。过往陈述cpp不好找工作的帖子数不胜数，我在暑期实习总结里也吐槽过了，希望各位即将面临秋招季的同学及时听劝，不要被某些流量大v忽悠。学个cpp冲后端放在几年前也许是捷径，但如今就业寒潮下没有快速通道，想走后端还是老老实实学Java或者Golang。cpp不是后端语言，只学个cpp最终的归宿可能就是翻车干到客户端（牛客有多少个“客户端劝退第x人”就不用我多说了吧）。</p><p>个人认为学cpp适合以下几种人：想走游戏客户端&#x2F;引擎&#x2F;服务端开发的，想走QT开发的，想走嵌入式软开的，想进军工研究所的，想就靠学历进学历厂的（byd，华为，中兴，荣耀，tp等等），在某些特定领域（高性能计算，图形学，数据库研发，操作系统内核研发等等）很有建树的组里读研做过项目&#x2F;发过论文的，以及完全没时间准备秋招的（不得不学了）。</p><p>关于找暑期实习：</p><p>我的个人经验是，暑期实习还是建议去一个转正机会大的厂。当初拿了鹅厂的暑期实习的我很高兴，拒了不少别的公司，但最后转正寄了，直接成为小丑🤡。此时有不少同学当初找的实习虽然不如我，但纷纷转正，拿到了保底offer，整得我心态有点小爆炸。其实暑期实习是一个快速拿offer的机会，拿到保底，然后再用这段经历去冲击大厂，这样的策略应该会更稳妥一些。</p><p>关于秋招投递简历的时间：</p><p>秋招比较后悔的一件事就是八月初的时候没有投简历，因为那时候还在实习，想着没啥时间准备秋招。然而这一波没投感觉错失了很多机会。结论就是秋招投简历的时间还是要越早越好，那时候各个大厂hc比较充足，运气好的话一波就直接拿下了。越到后面，hc发的差不多了，面试难度会更高。</p><p>关于逼签三方：</p><p>逼签三方真的是秋招期间碰到的最恶心的事情之一（其余的还有测评、kpi面以及泡池子）。三方保护学校就业率，保护企业稳定招人，唯独不保护学生选择工作的权利。逼签三方的公司真就是一点都没把学生当成自己未来的员工，而是当成呼之即来的牛马，要是再拖毁约流程就真的恶心到家了（说的就是你荣耀）。但被逼签作为学生真的也没什么办法，尤其是在等后面可能有更好的工作机会的时候。荣耀逼签的时候我真的心情十分痛苦，不想就这么签了，但又怕后面的机会开不出来，最后还是把荣耀拒了。好在后面开出来了更满意的offer，不然真就寄了。</p><p>最后一点碎碎念：</p><p>个人认为秋招有三样东西最重要：实力，运气，以及最重要的，努力下去的决心。秋招不是考试，看不到排名，也没有进度条，没人知道这烂透了的日子的终点究竟在哪。oc电话可能是下一秒打过来，但也可能是一个月之后。每个人的进度也不一样，有些人可能没怎么准备也能找到了很好的工作，有些人可能要苦苦支撑很久，最后工作依旧不理想。so和其他人比较是没有意义的，只能尽自己所能，准备好每一场面试，不放过任何一个机会。实力与你接近的人有很多很多，大部分人运气也好不到哪里去，作为秋招浪潮里微不足道的一个个体，我们能做的只有继续下去，努力面试，努力生活。摆烂当然也可以，但万一再努力一点就有梦寐以求的机会了呢？</p><p>不过话又说回来，就算没能拿到理想的工作，人生也不是到这里就开始结算排rank的。这仅仅是一个阶段性的结果，以后的日子还长，各位还有广阔天地大有可为，不用纠结于一次秋招的得失。若干年之后遇到更好的机会应该是大概率事件。</p><p>最后，感谢看我讲这么多废话的牛u们，感谢朋友们一直以来对我的帮助和支持，感谢牛客这个平台给了我和相同境遇的朋友们相遇的机会。</p><p>祝所有的朋友们都能得偿所愿，拿到自己满意的offer。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++17 实现简易线程池</title>
      <link href="/2024/09/25/C++17%20%E5%AE%9E%E7%8E%B0%E7%AE%80%E6%98%93%E7%BA%BF%E7%A8%8B%E6%B1%A0/"/>
      <url>/2024/09/25/C++17%20%E5%AE%9E%E7%8E%B0%E7%AE%80%E6%98%93%E7%BA%BF%E7%A8%8B%E6%B1%A0/</url>
      
        <content type="html"><![CDATA[<p>看到有些面经说被要求手撕线程池啊，多少有点吓人</p><p>所以感觉准备了一下，虽然感觉也背不下来 QAQ</p><p>C++17 实现，纯代码 80 行左右，可以实际运行，参考文献在文末。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;thread&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;condition_variable&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;mutex&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;future&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;functional&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;array&gt;</span>  </span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">// 线程池类  </span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ThreadPool</span> &#123;  </span><br><span class="line"><span class="keyword">private</span>:  </span><br><span class="line">    vector&lt;thread&gt; m_threads;           <span class="comment">// 线程队列  </span></span><br><span class="line">    queue&lt;function&lt;<span class="type">void</span>()&gt;&gt; m_tasks;    <span class="comment">// 任务队列  </span></span><br><span class="line">    mutex m_mutex;                      <span class="comment">// 任务队列锁  </span></span><br><span class="line">    condition_variable m_cv;            <span class="comment">// 线程阻塞的条件变量  </span></span><br><span class="line">    <span class="type">uint16_t</span> m_threads_num;             <span class="comment">// 线程数量  </span></span><br><span class="line">    <span class="type">bool</span> m_stop;                        <span class="comment">// 停机标记  </span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span>:  </span><br><span class="line">    <span class="comment">// 构造函数，初始化线程队列  </span></span><br><span class="line">    <span class="built_in">ThreadPool</span>(<span class="type">int</span> _threadNm) : <span class="built_in">m_threads_num</span>(_threadNm), <span class="built_in">m_stop</span>(<span class="literal">false</span>) &#123;  </span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Thread pool constructing...&quot;</span> &lt;&lt; endl;  </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; m_threads_num; i++) &#123;  </span><br><span class="line">            m_threads.<span class="built_in">emplace_back</span>([<span class="keyword">this</span>]() &#123;  </span><br><span class="line">                <span class="keyword">while</span> (<span class="literal">true</span>) &#123;  </span><br><span class="line">                    function&lt;<span class="built_in">void</span>()&gt; task;  </span><br><span class="line">                    &#123;  </span><br><span class="line">                        <span class="comment">// 任务队列加锁  </span></span><br><span class="line">                        unique_lock&lt;mutex&gt; <span class="built_in">lock</span>(m_mutex);  </span><br><span class="line">                        <span class="comment">// 阻塞，直到满足条件 任务队列非空 或者 停机标记为真  </span></span><br><span class="line">                        m_cv.<span class="built_in">wait</span>(lock, [<span class="keyword">this</span>]()&#123;<span class="keyword">return</span> !m_tasks.<span class="built_in">empty</span>() || m_stop;&#125;);  </span><br><span class="line">                        <span class="comment">// 如果无任务且停机，则结束线程  </span></span><br><span class="line">                        <span class="keyword">if</span> (m_stop &amp;&amp; m_tasks.<span class="built_in">empty</span>()) &#123;  </span><br><span class="line">                            <span class="keyword">return</span>;  </span><br><span class="line">                        &#125;  </span><br><span class="line">                        <span class="comment">// 获取任务  </span></span><br><span class="line">                        task = <span class="built_in">move</span>(m_tasks.<span class="built_in">front</span>());  </span><br><span class="line">                        m_tasks.<span class="built_in">pop</span>();  </span><br><span class="line">                    &#125;  </span><br><span class="line">                    <span class="comment">// 执行任务  </span></span><br><span class="line">                    <span class="built_in">task</span>();  </span><br><span class="line">                &#125;  </span><br><span class="line">            &#125;);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 新增任务  </span></span><br><span class="line">    <span class="comment">// 返回值是一个 future  </span></span><br><span class="line">    <span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> F, <span class="keyword">typename</span>... Args&gt;  </span></span><br><span class="line"><span class="function">    <span class="keyword">auto</span> <span class="title">addTask</span><span class="params">(F&amp;&amp; _task, Args&amp;&amp;... _args)</span> -&gt; future&lt;<span class="type">invoke_result_t</span>&lt;F, Args...&gt;&gt; </span>&#123;  </span><br><span class="line">        <span class="comment">// 简化返回类型  </span></span><br><span class="line">        <span class="comment">// invoke_result_t 用于获取函数返回值类型  </span></span><br><span class="line">        <span class="keyword">using</span> return_type = <span class="type">invoke_result_t</span>&lt;F, Args...&gt;;  </span><br><span class="line">        <span class="comment">// 创建共享指针，指向任务的 packaged_task 对象  </span></span><br><span class="line">        <span class="comment">// 用 bind 绑定传入的任务和参数  </span></span><br><span class="line">        <span class="comment">// packaged_task 是 C++ 标准库中的一个类模板，用于将函数（task）与 future 关联起来。  </span></span><br><span class="line">        <span class="keyword">auto</span> task = make_shared&lt;packaged_task&lt;<span class="built_in">return_type</span>()&gt;&gt;(  </span><br><span class="line">            <span class="built_in">bind</span>(forward&lt;F&gt;(_task), forward&lt;Args&gt;(_args)...));  </span><br><span class="line">        &#123;  </span><br><span class="line">            <span class="comment">// 获取任务队列锁  </span></span><br><span class="line">            <span class="comment">// 在临界区内创建了 lambda 函数并将其添加到任务队列中，确保线程安全  </span></span><br><span class="line">            <span class="function">lock_guard&lt;mutex&gt; <span class="title">lock</span><span class="params">(m_mutex)</span></span>;  </span><br><span class="line">            m_tasks.<span class="built_in">emplace</span>([task]() &#123; (*task)(); &#125;);  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="comment">// 从 packaged_task 中获取与之关联的 future 对象  </span></span><br><span class="line">        future&lt;return_type&gt; future = task-&gt;<span class="built_in">get_future</span>();  </span><br><span class="line">        <span class="comment">// 通知阻塞线程又新任务加入  </span></span><br><span class="line">        m_cv.<span class="built_in">notify_one</span>();  </span><br><span class="line">        <span class="keyword">return</span> future;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 关闭线程池  </span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">stop</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        &#123;  </span><br><span class="line">            <span class="comment">// 设置停机标识  </span></span><br><span class="line">            <span class="function">unique_lock&lt;mutex&gt; <span class="title">lock</span><span class="params">(m_mutex)</span></span>;  </span><br><span class="line">            m_stop = <span class="literal">true</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="comment">// 通知所有阻塞线程  </span></span><br><span class="line">        m_cv.<span class="built_in">notify_all</span>();  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 析构函数  </span></span><br><span class="line">    ~<span class="built_in">ThreadPool</span>() &#123;  </span><br><span class="line">        <span class="comment">// 执行线程关闭函数  </span></span><br><span class="line">        <span class="built_in">stop</span>();  </span><br><span class="line">        <span class="comment">// 等待所有线程结束  </span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;thread : m_threads) &#123;  </span><br><span class="line">            <span class="keyword">if</span> (thread.<span class="built_in">joinable</span>()) &#123;  </span><br><span class="line">                thread.<span class="built_in">join</span>();  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Thread pool destructed.&quot;</span> &lt;&lt; endl;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;;  </span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">calculate</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;n)</span> </span>&#123;  </span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Task: &quot;</span> &lt;&lt; n &lt;&lt; <span class="string">&quot; calculating: &quot;</span> &lt;&lt; n &lt;&lt; <span class="string">&quot; * &quot;</span> &lt;&lt; n &lt;&lt; endl;  </span><br><span class="line">    <span class="keyword">return</span> n * n;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">    <span class="function">ThreadPool <span class="title">pool</span><span class="params">(<span class="number">4</span>)</span></span>;  </span><br><span class="line">  </span><br><span class="line">    array&lt;future&lt;<span class="type">int</span>&gt;, <span class="number">10</span>&gt; futures;  </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; ++i) &#123;  </span><br><span class="line">        futures[i] = pool.<span class="built_in">addTask</span>(calculate, i);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; ++i) &#123;  </span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Calculate result: &quot;</span> &lt;&lt; futures[i].<span class="built_in">get</span>() &lt;&lt; endl;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>参考：<a href="https://wlayray.github.io/C++%E4%BB%A3%E7%A0%81%E9%A2%98%E4%B9%8B%E6%89%8B%E5%86%99%E7%AE%80%E6%98%93%E7%BA%BF%E7%A8%8B%E6%B1%A0/">Ray-Bos C++手写简易线程池</a></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用设计模式</title>
      <link href="/2024/09/09/%E5%B8%B8%E7%94%A8%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
      <url>/2024/09/09/%E5%B8%B8%E7%94%A8%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h1><h3 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h3><p>策略模式定义算法族，分别封装起来，让他们之间可以互相替换，此模式让算法的变化独立与使用算法的客户。</p><p>主要组成部分：</p><ul><li>策略接口，定义算法的接口，通常是一个具有执行方法的接口</li><li>具体策略，实现策略接口的具体算法</li><li>上下文，持有一个策略类的引用，实际调用算法接口的方法</li></ul><p>优点：</p><ul><li>避免开闭原则，可以在不修改现有代码的情况下引入新的策略</li><li>避免使用多个条件判断，通过策略类来替代条件判断语句</li><li>提高代码的可维护性和可读性</li></ul><p>缺点：</p><ul><li>增加对象数目</li><li>客户端必须知晓所有策略</li></ul><h3 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h3><p>观察者模式定义了对象之间的一对多依赖，当一个对象改变状态时，它的所有依赖者都会受到通知并自动更行。</p><p>主要组成部分：</p><ul><li>主题（被观察对象），是指被观察的对象。它提供了注册、移除和通知观察者的方法</li><li>观察者，定义了一个更新接口，用于接受主题的通知</li><li>具体主题，实现了主题接口，维护了一个观察者列表，当它的状态发生改变时，通知所有注册的观察者</li><li>具体观察者，实现了观察者接口，以便接受主题的通知并进行相应的更新</li></ul><p>优点：</p><ul><li>解耦，观察者模式将观察者与被观察者解耦，使他们可以独立变化</li><li>灵活性，可以在运行时增加或者删除观察者</li><li>支持广播语言，被观察者会自动通知所有的注册观察者，而无需知道观察者的具体信息</li></ul><p>缺点：</p><ul><li>可能引起性能问题</li><li>可能导致复杂循环</li></ul><h3 id="装饰者模式"><a href="#装饰者模式" class="headerlink" title="装饰者模式"></a>装饰者模式</h3><p>装饰者模式动态地把责任附加在对象上，若要扩展功能，装饰者比继承更有弹性的替代方案。</p><p>主要组成部分：</p><ul><li>组件，定义一个对象接口，可以给这些对象动态地添加职责</li><li>具体组件，实现组件接口的基本对象</li><li>装饰器，持有一个组件对象的引用，并且实现组件接口。装饰器基类的主要作用是定义接口并持有一个组件对象</li><li>具体装饰器，实现装饰器类，负责向组件添加职责</li></ul><p>优点：</p><ul><li>遵循开闭原则，可以在不修改现有代码的情况下为对象添加新的功能</li><li>灵活性高，可以通过多次使用装饰器实现复杂的功能组合</li><li>职责分离，每个装饰器只负责增加一部分功能，符合单一职责原则</li></ul><h3 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h3><p>工厂方法模式定义了一个创建对象的接口，但由子类决定要实例化的类是哪一个。工厂方法让类把实例化推迟到子类</p><p>抽象工厂模式提供一个接口，用于创建相关或依赖对象的家族，而不需要明确制定具体的类</p><h4 id="关于简单工厂"><a href="#关于简单工厂" class="headerlink" title="关于简单工厂"></a>关于简单工厂</h4><ol><li>简单工厂并不算设计模式</li><li>简单工厂把主方法（客户）中的具体对象创建过程分离，好处不仅是后期扩展时修改主体更改了，还有从多个客户（其他方法）中复用同一个工厂，更加OOP</li><li>常用的写法：一种写法是使用类，另一种是直接用静态方法（但无法继承改变行为）</li></ol><h4 id="关于工厂方法"><a href="#关于工厂方法" class="headerlink" title="关于工厂方法"></a>关于工厂方法</h4><ol><li>简单工厂只处理一个类（强调一对一），而工厂方法在主类（抽象的Creator类）中声明抽象的创建方法，让创建的执行延迟到子类的实现中</li><li>工厂方法的创建过程依赖于抽象的产品类（依赖倒置）</li><li>工厂方法中创建者类和产品类都是抽象的（这样的做法是哪怕只有一个具体创建者，也能实现更优的解耦）</li></ol><p>简单的说简单工厂就是一手包办的工厂，而工厂方法更是一个大的框架</p><p>工厂方法是抽象的，依赖子类来处理对象的创建，这样超类的代码与子类的创建就能实现解耦（你需要子类创建的对象具有一定的规范，这时候在抽象的超类中有具体的执行方法和抽象的工厂方法，这就实现了子类的区分与相应的约束，也就是说各个子类决定创建的对象有所不同，但执行方法都在超类的掌控之下）</p><h4 id="关于抽象工厂"><a href="#关于抽象工厂" class="headerlink" title="关于抽象工厂"></a>关于抽象工厂</h4><ol><li>Factory定义为接口，用于处理Pizza的原料（内部成员）</li><li>抽象的Pizza类中对原料的处理方法(preapre)也是抽象的</li><li>具体的Pizza实例中有处理原料的工厂的引用，用于具体prepare过程中（需要的原料必须来自工厂）</li><li>从3可看出与工厂方法相比，抽象工厂对Pizza的约束更大（原料的产生只能来自工厂），此时一个Pizza的诞生是 <code>Pizza pizza = new XjbPizza(XjbIngredientFactory)</code></li><li>抽象工厂时产品家族和具体工厂实现解耦（抽象工厂的做法是组合，而工厂方法是继承）</li></ol><p>优点：</p><ul><li>解耦，将对象的创建和使用分离，提高系统的灵活性和可维护性</li><li>遵循开闭原则，可以通过增加新的具体工厂和产品来扩展系统，而不影响现有代码</li><li>高内聚，将创建逻辑集中在一个地方，边缘管理</li></ul><h3 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h3><p>单例模式确保一个类只有一个实例，并提供全局访问点</p><p>单例模式比较简单，不过应用广泛，比如线程池、缓存、各种硬件驱动都使用了单例模式</p><p>单例模式与静态的全局变量相比，更为节省资源，对一些对资源敏感的对象而言更是如此，因为单例模式只在使用到的时候才会创建对象（延迟实例化）</p><p>如何实现：构造函数私有化，创建一个静态的方法调用该构造函数获取实例，并加以判断（再次调用，如果private static的单例已经创建非null，那就直接返回），这样在单线程下是没有问题的</p><p>线程安全的懒汉式：需要双重检查</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;mutex&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">static</span> Singleton* instance;</span><br><span class="line">    <span class="type">static</span> std::mutex mtx;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Singleton</span>() &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Singleton</span>(<span class="type">const</span> Singleton&amp;) = <span class="keyword">delete</span>;</span><br><span class="line">    Singleton&amp; <span class="keyword">operator</span>=(<span class="type">const</span> Singleton&amp;) = <span class="keyword">delete</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">static</span> Singleton* <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 第一次检查是否存在实例</span></span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">            <span class="function">std::lock_guard&lt;std::mutex&gt; <span class="title">lock</span><span class="params">(mtx)</span></span>;</span><br><span class="line">            <span class="comment">// 第二次检查是否存在实例</span></span><br><span class="line">            <span class="comment">// 两次检查都没有才会创建新的实例</span></span><br><span class="line">            <span class="keyword">if</span> (instance == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">                instance = <span class="keyword">new</span> <span class="built_in">Singleton</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Singleton* Singleton::instance = <span class="literal">nullptr</span>;</span><br><span class="line">std::mutex Singleton::mtx;</span><br></pre></td></tr></table></figure><ol><li>唯一实例，确保系统中只有一个实例，节省资源。</li><li>全局访问点，提供全局访问点，方便访问。</li><li>延迟实例化，可以延迟实例化，直到使用时才创建（懒汉式）。</li></ol><h3 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h3><p>命令模式将请求封装成对象，这可以让你使用不同的请求、队列，或者日志请求来参数化其他对象</p><p>命令模式也可以支持撤销操作</p><h3 id="适配器模式与外观模式"><a href="#适配器模式与外观模式" class="headerlink" title="适配器模式与外观模式"></a>适配器模式与外观模式</h3><p>适配器模式将一个类的接口，转换成客期望的另一个接口</p><p>适配器让原本接口不兼容的类可以合作无间</p><p>外观模式提供一个统一的接口，用来访问子系统中的一群接口</p><p>外观定义了一个高层接口，让子系统更容易使用</p><p>简单的来说适配器模式就是用来解决兼容性问题的方案</p><blockquote><p>参考：<a href="https://www.bluepuni.com/archives/head-first-design-patterns/">Head First 设计模式学习笔记</a></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记大厂离职</title>
      <link href="/2024/08/26/%E8%AE%B0%E5%A4%A7%E5%8E%82%E7%A6%BB%E8%81%8C/"/>
      <url>/2024/08/26/%E8%AE%B0%E5%A4%A7%E5%8E%82%E7%A6%BB%E8%81%8C/</url>
      
        <content type="html"><![CDATA[<div class="note info simple"><p>封面是离职当天拍摄的科兴科学园。</p></div><p>悠哉悠哉，混了两个多月后，终于从鹅厂离职了。</p><p>离职的一个原因其实也很简单，感觉转正无望，实习又学不到什么东西，就只好润了。今年公司实习生非常多，水平也很高。原以为自己这两个月工作量应该不少，但奈何如今内卷成风，临近转正代码 CR 时才知道其他组里实习生居然做了那么多工作，更有甚者已经在部门级别的分享会里做汇报了。我这工作量顿时显得单薄，还是别去当炮灰了。</p><p>不过感觉太卷了只是一个原因，如果仅仅是卷的话我还是会参加一下。但部门这边答辩时间的一拖再拖我真是没法忍了。本来说八月中旬答辩，到八月后又说八月下旬答辩。直到我离职的时候还不知道具体的答辩时间。今日和同组实习的同学吃饭时才得知，最后答辩时间被拖到了 9 月初，这还答辩啥啊。今年秋招又比往年提前，这出结果黄花菜都凉了。同学最终也选择了放弃答辩，不过他是本科生，可以回去读研。我顿时又有些羡慕，可惜自己不能再找地方多躲几年。</p><p>从互联网实习感觉收获还是挺多的，毕竟之前一直在学校小作坊打工，第一次接触到正式公司的业务开发流程，感慨颇多，读研的时间果然大部分还是浪费了。在公司做业务感觉最重要的还是产出，不仅仅是代码的产出，还有各种技术积累和技术分享的产出。刚进公司 leader 和 mentor 都在跟我强调平时一定要多写写技术积累的文档，我一直到快离职时才理解为何要这样做，最后转正答辩还挺看这些东西的。可惜我没往心里去，没写几篇。不过也算学到了，有空还是应该多写写，有点内容输出会比较好吧。当然代码产出也是很重要的，学到了很多代码风格和规范相关的东西，写好的代码还是不容易。</p><p>不过互联网公司也不是都是好的，就比如代码风格这个问题，明明是很重要的一个事情，但是因为业务 ddl 或者什么别的原因，大部分人写代码时并不会特别在意代码的可读性和可维护性。完成功能和解决 bug 是第一位的，谁又在乎代码写得好或者不好呢？于是代码就逐渐变成了屎山，难以维护，最后因为有些代码耦合过深，bug 改不了，新业务加不进去，就又要花精力来重构。理想状态确实是很难实现的，但现实也过于好笑了。</p><p>另外一个比较难以忍受的是工作时长。我入职第一天，mentor 就跟我说，我们组里是早上十点半上班，晚上九点半没事了就可以下班了。实际的工作时间也差不多，不过他们正职员工很少看到有晚上九点多走的，大部分人还是会待到十点以后。我每次都是九点二十全组第一个下班（笑）。听同事说，正职员工总是九点多就下班会被 leader 叫去谈话。我并不是很理解，晚上的时间效率也不会很高，为啥一定要待到那么晚。我这下班回家也就十点多了，再处理下学校那边老师的事情，基本也就只能躺下睡觉了。两个月过于充实的上班生活也让我反思，这样的生活真的是我想要的吗？我确实还没想明白这件事。</p><p>总得来说，我还是很喜欢鹅厂的，当时也是放弃了几家别的公司的机会选择了这里。现在想想，可能这并不是最优解，但我实现了很久的一个心愿，也确实不后悔。人生的能选择的路有很多，有些路令人心驰神往，但终究还是要走一遭才知道，这路好不好走，风景如何。走过的路都会成为人生的阅历，路过的风景都会记在心里，又何必后悔。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
            <tag> 暑期实习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记大厂打工</title>
      <link href="/2024/07/01/2024.7.1%20%E8%AE%B0%E5%A4%A7%E5%8E%82%E6%89%93%E5%B7%A5/"/>
      <url>/2024/07/01/2024.7.1%20%E8%AE%B0%E5%A4%A7%E5%8E%82%E6%89%93%E5%B7%A5/</url>
      
        <content type="html"><![CDATA[<p>今天深圳风确实很大，把我脖子上的工牌吹得飞起，还好带子够长，不会打到脸上。虽然已经在厂里打了三星期的工，但这工牌还是戴不习惯，就像西装的领带，总像是有个无形的大手在牵着我。我也挣扎不了，只能随它去了，牵着就牵着吧，反正被牵着也不是一天两天了。</p><p>总的来说大厂实习过得还是可以，起码比在学校给老板打工要舒服。公司里不会大周末的找我干活，也不会晚上十一点给我发消息。资本家虽然会剥削，但是先进的生产关系带来的生活质量的改善还是肉眼可见，比手工作坊或者师徒行会要强多了。感觉现在除了因为没毕业还有学校的乱七八糟的事要操心，每天最大的烦恼就是午饭和晚饭吃什么。所以赶紧毕业吧，这研究生真不是人读的。不过我都被人牵着了，读得难过也是理所当然。</p><p>哦，每天烦恼的事还有早上起来上班，一个是早上根本起不来，另一个是选择什么交通工具上班。起不来很好理解，我打赌没人大早晨想到今天要上班能高兴地从床上蹦起来；交通工具的选择就更复杂了，是坐公司的班车，还是公寓的班车，还是公交，或者是打车，每天早上都要思考一下。还是住的离公司有点远，以后租房必须要在地铁旁边。</p><p>今天还收到了两个公司的邮件，一家给我发的是感谢信，这是我暑期实习面的第一家公司，三月份就给我挂了，现在还给我发感谢信，我也真是得好好谢谢他。另一家公司给我发的是提前批的笔试通知，但我明明记得我当时投的是暑期实习的岗位，也是三月份投递的，这是终于想起我来了？今天收到的还有公寓六月份的账单。算了一下钱，这两个月连押金带房租快把我手里的钱都花光了，再不发工资我就要在深圳饿死了。打工人的生活真是难啊。</p><p>难得不止有挣不到钱，还有找不到工作。一想已经是七月，马上就面临秋招，我心里这个忐忑。实习虽然挺忙，但也没干出来啥事情，到秋招也不知道还有没有暑期实习这个运气。我能进大厂是三分靠打拼，97 分天注定（没准更多），真要看实力估计一些本科生都够呛能比过。不过比不过本科生也正常，毕竟有本事的本科毕业就收割 offer 了，谁还闲的没事干读研。</p><p>我一直觉得本科毕业找工作比读研要好得多，进入职场还能带着那股朝气。读研的同学感觉大部分都已经是半个死人了，只想找地方混口饭吃。我也是想混口饭吃，但混着混着还是来了互联网。没办法，有的人能找到地方混，有的人找不到，就像雨天里的麻雀，再大的雨也只能躲屋檐桥洞，一身狼狈。可能来大厂也是一种自我安慰吧，起码混得表面上还算光鲜一点。大概小镇做题家是这样的，只有卷出来才能证明自己存在的意义。哪怕嘴里不愿意接受，从小教育出来的思想钢印是深深烙在脑子里。别的不说，在大厂自卑还是多少有一点，尤其是看到全组的同事学历都比自己好的时候。那种感觉是懊悔，责备自己为啥没考上 985。心里的这种感觉时刻提醒我，小镇做题家，这辈子都逃不出学历的诅咒。</p><p>我现在最大的盼望有两个，一个是能赶快毕业，最好明天一睁眼就拿到双证可以走人。另一个是能找个差不多的工作。其实我觉得现在这工作就挺好的，就是离家太远。人在外漂泊久了，就总想回家。从深圳回家又太贵，有点舍不得花这个钱，但不花钱就回不去家。所以还是钱太少了，要是钱多就不用愁了。</p><p>算了，先飘着吧，反正生活都这样了，也该变好点了吧。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
            <tag> 暑期实习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows 自动运行连接校园网的 Shell 脚本</title>
      <link href="/2023/09/27/Windows%20%E8%87%AA%E5%8A%A8%E8%BF%90%E8%A1%8C%E8%BF%9E%E6%8E%A5%E6%A0%A1%E5%9B%AD%E7%BD%91%E7%9A%84%20Shell%20%E8%84%9A%E6%9C%AC/"/>
      <url>/2023/09/27/Windows%20%E8%87%AA%E5%8A%A8%E8%BF%90%E8%A1%8C%E8%BF%9E%E6%8E%A5%E6%A0%A1%E5%9B%AD%E7%BD%91%E7%9A%84%20Shell%20%E8%84%9A%E6%9C%AC/</url>
      
        <content type="html"><![CDATA[<p>因为最近在用教研室的电脑挂 PT 站，然而学校拨号上网居然不给分配 IPV6 地址，只好连无线 AP 了。但是校园网总是没事就掉一下，有点恶心。</p><p>早些日子写了一个登录校园网的 Shell 脚本，本来是用在 OpenWrt 路由上的，这回把这脚本拿到了 win 上用。</p><h1 id="校园网登录脚本"><a href="#校园网登录脚本" class="headerlink" title="校园网登录脚本"></a>校园网登录脚本</h1><p>之前没事干看了很久校园网的登录界面代码，发现校园网的认证逻辑还是挺奇怪的。</p><blockquote><p>校园网认证登录</p><ol><li>Post 到服务器，获取 Challenge 码</li><li>对 Challenge 码和 password 进行处理，得到一个 md5 加密后的密钥</li><li>将密钥和用户名、Challenge 码一起 Post 发给服务器，登录成功</li></ol></blockquote><h2 id="获取-Challenge-码"><a href="#获取-Challenge-码" class="headerlink" title="获取 Challenge 码"></a>获取 Challenge 码</h2><p>照着浏览器抓取的请求一顿抄：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">RESULT=$(curl &#x27;http://m.njust.edu.cn/portal_io/getchallenge&#x27; \</span><br><span class="line">  -X &#x27;POST&#x27; \</span><br><span class="line">  -H &#x27;Accept: application/json, text/javascript, */*; q=0.01&#x27; \</span><br><span class="line">  -H &#x27;Accept-Language: zh-CN,zh-HK;q=0.9,zh;q=0.8,en;q=0.7&#x27; \</span><br><span class="line">  -H &#x27;Connection: keep-alive&#x27; \</span><br><span class="line">  -H &#x27;Content-Length: 0&#x27; \</span><br><span class="line">  -H &#x27;Cookie: zg_did=%7B%22did%22%3A%20%221830dcb70ae82e-07e49a52b9eb58-1b525635-384000-1830dcb70afe00%22%7D; zg_=%7B%22sid%22%3A%201662383780017%2C%22updated%22%3A%201662383858267%2C%22info%22%3A%201662383780017%2C%22superProperty%22%3A%20%22%7B%7D%22%2C%22platform%22%3A%20%22%7B%7D%22%2C%22utm%22%3A%20%22%7B%7D%22%2C%22referrerDomain%22%3A%20%22ehall.njust.edu.cn%22%2C%22cuid%22%3A%20%22122106010798%22%7D&#x27; \</span><br><span class="line">  -H &#x27;Origin: http://m.njust.edu.cn&#x27; \</span><br><span class="line">  -H &#x27;Referer: http://m.njust.edu.cn/portal/index.html?redirect=aHR0cDovL3d3dy50YW9iYW8uY29tLw==&#x27; \</span><br><span class="line">  -H &#x27;User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36&#x27; \</span><br><span class="line">  -H &#x27;X-Requested-With: XMLHttpRequest&#x27; )</span><br><span class="line"></span><br><span class="line">echo $&#123;RESULT&#125; | jq &#x27;.challenge&#x27;</span><br><span class="line">CHALLENGE=$(echo $&#123;RESULT&#125; | jq -r &#x27;.challenge&#x27;)</span><br><span class="line">echo $&#123;CHALLENGE&#125;</span><br></pre></td></tr></table></figure><p>把 json 结果用 jq 抓一下，然后就会拿到 Challenge 码。</p><h2 id="md5-加密-Challenge-和-password"><a href="#md5-加密-Challenge-和-password" class="headerlink" title="md5 加密 Challenge 和 password"></a>md5 加密 Challenge 和 password</h2><p>这里校园网的前端写得特别清楚，但最大的问题是他们用 JavaScript 写的，但我可不会 JS，于是只好用 python 重写。其实大部分内容都是 chatgpt 帮我写的，感谢科技的力量。</p><p>但这里遇到一个坑，JS 代码处理数字用的都是 32 位，一开始没注意，加密出来的 md5 一直跟浏览器抓到的不一样。。。</p><p>整个过程大部分是一个重写的 md5 加密。最开始生成一个 0 到 255 的随机数，后面接上用户密码，然后对 Challenge 码每两位转换成一个 16 进制数，再跟在后面。最后将这一串数进行 md5 加密，前面补上随机数的值，得到加密后的密钥。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> c_int32</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">i32</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="comment"># 如果n是负数就转换为32位对应的数</span></span><br><span class="line">    <span class="keyword">if</span> n &lt; <span class="number">0</span>:</span><br><span class="line">        n = (<span class="number">1</span> &lt;&lt; <span class="number">32</span>) + n</span><br><span class="line">    <span class="keyword">return</span> c_int32(n).value</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">createChapPassword</span>(<span class="params">challenge</span>):</span><br><span class="line">    id1 = random.randint(<span class="number">0</span>, <span class="number">255</span>)</span><br><span class="line">    password = <span class="string">&#x27;yourpasswd&#x27;</span></span><br><span class="line">    str1 = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    str1 += <span class="built_in">chr</span>(id1)</span><br><span class="line">    str1 += password</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(challenge), <span class="number">2</span>):</span><br><span class="line">        hex_value = challenge[i:i+<span class="number">2</span>]</span><br><span class="line">        dec_value = <span class="built_in">int</span>(hex_value, <span class="number">16</span>)</span><br><span class="line">        str1 += <span class="built_in">chr</span>(dec_value)</span><br><span class="line"></span><br><span class="line">    hash_value = md5(str1)</span><br><span class="line"></span><br><span class="line">    chappassword = (<span class="string">&#x27;0&#x27;</span> <span class="keyword">if</span> id1 &lt; <span class="number">16</span> <span class="keyword">else</span> <span class="string">&#x27;&#x27;</span>) + <span class="built_in">hex</span>(id1)[<span class="number">2</span>:] + hash_value</span><br><span class="line">    <span class="keyword">return</span> chappassword</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rotateLeft</span>(<span class="params">lValue, iShiftBits</span>):</span><br><span class="line">    <span class="keyword">return</span> i32((lValue &lt;&lt; iShiftBits)) | (lValue &gt;&gt; (<span class="number">32</span> - iShiftBits))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">addUnsigned</span>(<span class="params">lX, lY</span>):</span><br><span class="line">    lX4, lY4, lX8, lY8, lResult = <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">    lX8 = (lX &amp; <span class="number">0x80000000</span>)</span><br><span class="line">    lY8 = (lY &amp; <span class="number">0x80000000</span>)</span><br><span class="line">    lX4 = (lX &amp; <span class="number">0x40000000</span>)</span><br><span class="line">    lY4 = (lY &amp; <span class="number">0x40000000</span>)</span><br><span class="line">    lResult = (lX &amp; <span class="number">0x3FFFFFFF</span>) + (lY &amp; <span class="number">0x3FFFFFFF</span>)</span><br><span class="line">    <span class="keyword">if</span> (lX4 &amp; lY4):</span><br><span class="line">        <span class="keyword">return</span> (lResult ^ <span class="number">0x80000000</span> ^ lX8 ^ lY8)</span><br><span class="line">    <span class="keyword">elif</span> (lX4 | lY4):</span><br><span class="line">        <span class="keyword">if</span> (lResult &amp; <span class="number">0x40000000</span>):</span><br><span class="line">            <span class="keyword">return</span> (lResult ^ <span class="number">0xC0000000</span> ^ lX8 ^ lY8)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> (lResult ^ <span class="number">0x40000000</span> ^ lX8 ^ lY8)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> (lResult ^ lX8 ^ lY8)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">F</span>(<span class="params">x, y, z</span>):</span><br><span class="line">    <span class="keyword">return</span> (x &amp; y) | ((~x) &amp; z)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">G</span>(<span class="params">x, y, z</span>):</span><br><span class="line">    <span class="keyword">return</span> (x &amp; z) | (y &amp; (~z))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">H</span>(<span class="params">x, y, z</span>):</span><br><span class="line">    <span class="keyword">return</span> (x ^ y ^ z)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">I</span>(<span class="params">x, y, z</span>):</span><br><span class="line">    <span class="keyword">return</span> (y ^ (x | (~z)))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">FF</span>(<span class="params">a, b, c, d, x, s, ac</span>):</span><br><span class="line">    a = addUnsigned(a, addUnsigned(addUnsigned(F(b, c, d), x), ac))</span><br><span class="line">    <span class="keyword">return</span> addUnsigned(rotateLeft(a, s), b)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">GG</span>(<span class="params">a, b, c, d, x, s, ac</span>):</span><br><span class="line">    a = addUnsigned(a, addUnsigned(addUnsigned(G(b, c, d), x), ac))</span><br><span class="line">    <span class="keyword">return</span> addUnsigned(rotateLeft(a, s), b)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">HH</span>(<span class="params">a, b, c, d, x, s, ac</span>):</span><br><span class="line">    a = addUnsigned(a, addUnsigned(addUnsigned(H(b, c, d), x), ac))</span><br><span class="line">    <span class="keyword">return</span> addUnsigned(rotateLeft(a, s), b)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">II</span>(<span class="params">a, b, c, d, x, s, ac</span>):</span><br><span class="line">    a = addUnsigned(a, addUnsigned(addUnsigned(I(b, c, d), x), ac))</span><br><span class="line">    <span class="keyword">return</span> addUnsigned(rotateLeft(a, s), b)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">convertToWordArray</span>(<span class="params">string</span>):</span><br><span class="line">    lWordCount = <span class="literal">None</span></span><br><span class="line">    lMessageLength = <span class="built_in">len</span>(string)</span><br><span class="line">    lNumberOfWordsTempOne = lMessageLength + <span class="number">8</span></span><br><span class="line">    lNumberOfWordsTempTwo = <span class="built_in">int</span>((lNumberOfWordsTempOne - (lNumberOfWordsTempOne % <span class="number">64</span>)) / <span class="number">64</span>)</span><br><span class="line">    lNumberOfWords = <span class="built_in">int</span>((lNumberOfWordsTempTwo + <span class="number">1</span>) * <span class="number">16</span>)</span><br><span class="line">    lWordArray = [<span class="number">0</span>] * (lNumberOfWords - <span class="number">1</span>)</span><br><span class="line">    lBytePosition = <span class="number">0</span></span><br><span class="line">    lByteCount = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> lByteCount &lt; lMessageLength:</span><br><span class="line">        lWordCount = <span class="built_in">int</span>((lByteCount - (lByteCount % <span class="number">4</span>)) / <span class="number">4</span>)</span><br><span class="line">        lBytePosition = i32((lByteCount % <span class="number">4</span>) * <span class="number">8</span>)</span><br><span class="line">        lWordArray[lWordCount] = (</span><br><span class="line">            lWordArray[lWordCount] |</span><br><span class="line">            i32((<span class="built_in">ord</span>(<span class="built_in">str</span>(string[lByteCount])) &lt;&lt; lBytePosition))</span><br><span class="line">        )</span><br><span class="line">        lByteCount += <span class="number">1</span></span><br><span class="line">    lWordCount = <span class="built_in">int</span>((lByteCount - (lByteCount % <span class="number">4</span>)) / <span class="number">4</span>)</span><br><span class="line">    lBytePosition = i32((lByteCount % <span class="number">4</span>) * <span class="number">8</span>)</span><br><span class="line">    lWordArray[lWordCount] = (</span><br><span class="line">        lWordArray[lWordCount] |</span><br><span class="line">        i32((<span class="number">0x80</span> &lt;&lt; lBytePosition))</span><br><span class="line">    )</span><br><span class="line">    lWordArray[lNumberOfWords - <span class="number">2</span>] = i32(lMessageLength &lt;&lt; <span class="number">3</span>)</span><br><span class="line">    lWordArray.append(<span class="number">0</span>)</span><br><span class="line">    <span class="comment">#lWordArray[lNumberOfWords - 1] = lMessageLength &gt;&gt; 29</span></span><br><span class="line">    <span class="keyword">return</span> lWordArray</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">wordToHex</span>(<span class="params">lValue</span>):</span><br><span class="line">    WordToHexValue = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    WordToHexValueTemp = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> lCount <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">        lByte = (lValue &gt;&gt; (lCount * <span class="number">8</span>)) &amp; <span class="number">255</span></span><br><span class="line">        WordToHexValueTemp = <span class="string">&#x27;0&#x27;</span> + <span class="string">&quot;&#123;:x&#125;&quot;</span>.<span class="built_in">format</span>(lByte)</span><br><span class="line">        WordToHexValue = WordToHexValue + WordToHexValueTemp[-<span class="number">2</span>:]</span><br><span class="line">    <span class="keyword">return</span> WordToHexValue</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">uTF8Encode</span>(<span class="params">string</span>):</span><br><span class="line">    string = string.replace(<span class="string">&#x27;\x0d\x0a&#x27;</span>, <span class="string">&#x27;\x0a&#x27;</span>)</span><br><span class="line">    output = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(string)):</span><br><span class="line">        c = <span class="built_in">ord</span>(string[n])</span><br><span class="line">        <span class="keyword">if</span> c &lt; <span class="number">128</span>:</span><br><span class="line">            output += <span class="built_in">chr</span>(c)</span><br><span class="line">        <span class="keyword">elif</span> c &gt; <span class="number">127</span> <span class="keyword">and</span> c &lt; <span class="number">2048</span>:</span><br><span class="line">            output += <span class="built_in">chr</span>((c &gt;&gt; <span class="number">6</span>) | <span class="number">192</span>)</span><br><span class="line">            output += <span class="built_in">chr</span>((c &amp; <span class="number">63</span>) | <span class="number">128</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            output += <span class="built_in">chr</span>((c &gt;&gt; <span class="number">12</span>) | <span class="number">224</span>)</span><br><span class="line">            output += <span class="built_in">chr</span>(((c &gt;&gt; <span class="number">6</span>) &amp; <span class="number">63</span>) | <span class="number">128</span>)</span><br><span class="line">            output += <span class="built_in">chr</span>((c &amp; <span class="number">63</span>) | <span class="number">128</span>)</span><br><span class="line">    <span class="keyword">return</span> output</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">md5</span>(<span class="params">string</span>):</span><br><span class="line">    x = []</span><br><span class="line">    S11 = <span class="number">7</span></span><br><span class="line">    S12 = <span class="number">12</span></span><br><span class="line">    S13 = <span class="number">17</span></span><br><span class="line">    S14 = <span class="number">22</span></span><br><span class="line">    S21 = <span class="number">5</span></span><br><span class="line">    S22 = <span class="number">9</span></span><br><span class="line">    S23 = <span class="number">14</span></span><br><span class="line">    S24 = <span class="number">20</span></span><br><span class="line">    S31 = <span class="number">4</span></span><br><span class="line">    S32 = <span class="number">11</span></span><br><span class="line">    S33 = <span class="number">16</span></span><br><span class="line">    S34 = <span class="number">23</span></span><br><span class="line">    S41 = <span class="number">6</span></span><br><span class="line">    S42 = <span class="number">10</span></span><br><span class="line">    S43 = <span class="number">15</span></span><br><span class="line">    S44 = <span class="number">21</span></span><br><span class="line">    x = convertToWordArray(string)</span><br><span class="line">    a = <span class="number">0x67452301</span></span><br><span class="line">    b = <span class="number">0xEFCDAB89</span></span><br><span class="line">    c = <span class="number">0x98BADCFE</span></span><br><span class="line">    d = <span class="number">0x10325476</span></span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(x), <span class="number">16</span>):</span><br><span class="line">        AA, BB, CC, DD = a, b, c, d</span><br><span class="line">        a = FF(a, b, c, d, x[k+<span class="number">0</span>], S11, <span class="number">0xD76AA478</span>)</span><br><span class="line">        d = FF(d, a, b, c, x[k+<span class="number">1</span>], S12, <span class="number">0xE8C7B756</span>)</span><br><span class="line">        c = FF(c, d, a, b, x[k+<span class="number">2</span>], S13, <span class="number">0x242070DB</span>)</span><br><span class="line">        b = FF(b, c, d, a, x[k+<span class="number">3</span>], S14, <span class="number">0xC1BDCEEE</span>)</span><br><span class="line">        a = FF(a, b, c, d, x[k+<span class="number">4</span>], S11, <span class="number">0xF57C0FAF</span>)</span><br><span class="line">        d = FF(d, a, b, c, x[k+<span class="number">5</span>], S12, <span class="number">0x4787C62A</span>)</span><br><span class="line">        c = FF(c, d, a, b, x[k+<span class="number">6</span>], S13, <span class="number">0xA8304613</span>)</span><br><span class="line">        b = FF(b, c, d, a, x[k+<span class="number">7</span>], S14, <span class="number">0xFD469501</span>)</span><br><span class="line">        a = FF(a, b, c, d, x[k+<span class="number">8</span>], S11, <span class="number">0x698098D8</span>)</span><br><span class="line">        d = FF(d, a, b, c, x[k+<span class="number">9</span>], S12, <span class="number">0x8B44F7AF</span>)</span><br><span class="line">        c = FF(c, d, a, b, x[k+<span class="number">10</span>], S13, <span class="number">0xFFFF5BB1</span>)</span><br><span class="line">        b = FF(b, c, d, a, x[k+<span class="number">11</span>], S14, <span class="number">0x895CD7BE</span>)</span><br><span class="line">        a = FF(a, b, c, d, x[k+<span class="number">12</span>], S11, <span class="number">0x6B901122</span>)</span><br><span class="line">        d = FF(d, a, b, c, x[k+<span class="number">13</span>], S12, <span class="number">0xFD987193</span>)</span><br><span class="line">        c = FF(c, d, a, b, x[k+<span class="number">14</span>], S13, <span class="number">0xA679438E</span>)</span><br><span class="line">        b = FF(b, c, d, a, x[k+<span class="number">15</span>], S14, <span class="number">0x49B40821</span>)</span><br><span class="line">        a = GG(a, b, c, d, x[k+<span class="number">1</span>], S21, <span class="number">0xF61E2562</span>)</span><br><span class="line">        d = GG(d, a, b, c, x[k+<span class="number">6</span>], S22, <span class="number">0xC040B340</span>)</span><br><span class="line">        c = GG(c, d, a, b, x[k+<span class="number">11</span>], S23, <span class="number">0x265E5A51</span>)</span><br><span class="line">        b = GG(b, c, d, a, x[k+<span class="number">0</span>], S24, <span class="number">0xE9B6C7AA</span>)</span><br><span class="line">        a = GG(a, b, c, d, x[k+<span class="number">5</span>], S21, <span class="number">0xD62F105D</span>)</span><br><span class="line">        d = GG(d, a, b, c, x[k+<span class="number">10</span>], S22, <span class="number">0x2441453</span>)</span><br><span class="line">        c = GG(c, d, a, b, x[k+<span class="number">15</span>], S23, <span class="number">0xD8A1E681</span>)</span><br><span class="line">        b = GG(b, c, d, a, x[k+<span class="number">4</span>], S24, <span class="number">0xE7D3FBC8</span>)</span><br><span class="line">        a = GG(a, b, c, d, x[k+<span class="number">9</span>], S21, <span class="number">0x21E1CDE6</span>)</span><br><span class="line">        d = GG(d, a, b, c, x[k+<span class="number">14</span>], S22, <span class="number">0xC33707D6</span>)</span><br><span class="line">        c = GG(c, d, a, b, x[k+<span class="number">3</span>], S23, <span class="number">0xF4D50D87</span>)</span><br><span class="line">        b = GG(b, c, d, a, x[k+<span class="number">8</span>], S24, <span class="number">0x455A14ED</span>)</span><br><span class="line">        a = GG(a, b, c, d, x[k+<span class="number">13</span>], S21, <span class="number">0xA9E3E905</span>)</span><br><span class="line">        d = GG(d, a, b, c, x[k+<span class="number">2</span>], S22, <span class="number">0xFCEFA3F8</span>)</span><br><span class="line">        c = GG(c, d, a, b, x[k+<span class="number">7</span>], S23, <span class="number">0x676F02D9</span>)</span><br><span class="line">        b = GG(b, c, d, a, x[k+<span class="number">12</span>], S24, <span class="number">0x8D2A4C8A</span>)</span><br><span class="line">        a = HH(a, b, c, d, x[k+<span class="number">5</span>], S31, <span class="number">0xFFFA3942</span>)</span><br><span class="line">        d = HH(d, a, b, c, x[k+<span class="number">8</span>], S32, <span class="number">0x8771F681</span>)</span><br><span class="line">        c = HH(c, d, a, b, x[k+<span class="number">11</span>], S33, <span class="number">0x6D9D6122</span>)</span><br><span class="line">        b = HH(b, c, d, a, x[k+<span class="number">14</span>], S34, <span class="number">0xFDE5380C</span>)</span><br><span class="line">        a = HH(a, b, c, d, x[k+<span class="number">1</span>], S31, <span class="number">0xA4BEEA44</span>)</span><br><span class="line">        d = HH(d, a, b, c, x[k+<span class="number">4</span>], S32, <span class="number">0x4BDECFA9</span>)</span><br><span class="line">        c = HH(c, d, a, b, x[k+<span class="number">7</span>], S33, <span class="number">0xF6BB4B60</span>)</span><br><span class="line">        b = HH(b, c, d, a, x[k+<span class="number">10</span>], S34, <span class="number">0xBEBFBC70</span>)</span><br><span class="line">        a = HH(a, b, c, d, x[k+<span class="number">13</span>], S31, <span class="number">0x289B7EC6</span>)</span><br><span class="line">        d = HH(d, a, b, c, x[k+<span class="number">0</span>], S32, <span class="number">0xEAA127FA</span>)</span><br><span class="line">        c = HH(c, d, a, b, x[k+<span class="number">3</span>], S33, <span class="number">0xD4EF3085</span>)</span><br><span class="line">        b = HH(b, c, d, a, x[k+<span class="number">6</span>], S34, <span class="number">0x4881D05</span>)</span><br><span class="line">        a = HH(a, b, c, d, x[k+<span class="number">9</span>], S31, <span class="number">0xD9D4D039</span>)</span><br><span class="line">        d = HH(d, a, b, c, x[k+<span class="number">12</span>], S32, <span class="number">0xE6DB99E5</span>)</span><br><span class="line">        c = HH(c, d, a, b, x[k+<span class="number">15</span>], S33, <span class="number">0x1FA27CF8</span>)</span><br><span class="line">        b = HH(b, c, d, a, x[k+<span class="number">2</span>], S34, <span class="number">0xC4AC5665</span>)</span><br><span class="line">        a = II(a, b, c, d, x[k+<span class="number">0</span>], S41, <span class="number">0xF4292244</span>)</span><br><span class="line">        d = II(d, a, b, c, x[k+<span class="number">7</span>], S42, <span class="number">0x432AFF97</span>)</span><br><span class="line">        c = II(c, d, a, b, x[k+<span class="number">14</span>], S43, <span class="number">0xAB9423A7</span>)</span><br><span class="line">        b = II(b, c, d, a, x[k+<span class="number">5</span>], S44, <span class="number">0xFC93A039</span>)</span><br><span class="line">        a = II(a, b, c, d, x[k+<span class="number">12</span>], S41, <span class="number">0x655B59C3</span>)</span><br><span class="line">        d = II(d, a, b, c, x[k+<span class="number">3</span>], S42, <span class="number">0x8F0CCC92</span>)</span><br><span class="line">        c = II(c, d, a, b, x[k+<span class="number">10</span>], S43, <span class="number">0xFFEFF47D</span>)</span><br><span class="line">        b = II(b, c, d, a, x[k+<span class="number">1</span>], S44, <span class="number">0x85845DD1</span>)</span><br><span class="line">        a = II(a, b, c, d, x[k+<span class="number">8</span>], S41, <span class="number">0x6FA87E4F</span>)</span><br><span class="line">        d = II(d, a, b, c, x[k+<span class="number">15</span>], S42, <span class="number">0xFE2CE6E0</span>)</span><br><span class="line">        c = II(c, d, a, b, x[k+<span class="number">6</span>], S43, <span class="number">0xA3014314</span>)</span><br><span class="line">        b = II(b, c, d, a, x[k+<span class="number">13</span>], S44, <span class="number">0x4E0811A1</span>)</span><br><span class="line">        a = II(a, b, c, d, x[k+<span class="number">4</span>], S41, <span class="number">0xF7537E82</span>)</span><br><span class="line">        d = II(d, a, b, c, x[k+<span class="number">11</span>], S42, <span class="number">0xBD3AF235</span>)</span><br><span class="line">        c = II(c, d, a, b, x[k+<span class="number">2</span>], S43, <span class="number">0x2AD7D2BB</span>)</span><br><span class="line">        b = II(b, c, d, a, x[k+<span class="number">9</span>], S44, <span class="number">0xEB86D391</span>)</span><br><span class="line">        a = addUnsigned(a, AA)</span><br><span class="line">        b = addUnsigned(b, BB)</span><br><span class="line">        c = addUnsigned(c, CC)</span><br><span class="line">        d = addUnsigned(d, DD)</span><br><span class="line">    tempValue = wordToHex(a) + wordToHex(b) + wordToHex(c) + wordToHex(d)</span><br><span class="line">    <span class="keyword">return</span> tempValue.lower()</span><br></pre></td></tr></table></figure><h2 id="校园网认证"><a href="#校园网认证" class="headerlink" title="校园网认证"></a>校园网认证</h2><p>在拿到密钥之后，发一个 Post 请求给服务器，校园网就认证成功了。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">FILE_NAME=&#x27;.\md5_test.py&#x27;</span><br><span class="line">PYTHON_PATH=$&#123;PWD&#125;/$FILE_NAME</span><br><span class="line">PASSWD=$(python $PYTHON_PATH $CHALLENGE)</span><br><span class="line">echo $&#123;PASSWD&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">RES=$(curl -X POST &quot;http://m.njust.edu.cn/portal_io/login&quot; \</span><br><span class="line">  -H &quot;Accept: application/json, text/javascript, */*; q=0.01&quot; \</span><br><span class="line">  -H &quot;Accept-Language: zh-CN,zh-HK;q=0.9,zh;q=0.8,en;q=0.7&quot; \</span><br><span class="line">  -H &quot;Connection: keep-alive&quot; \</span><br><span class="line">  -H &quot;Content-Type: application/x-www-form-urlencoded; charset=UTF-8&quot; \</span><br><span class="line">  -H &quot;Cookie: zg_did=%7B%22did%22%3A%20%221830dcb70ae82e-07e49a52b9eb58-1b525635-384000-1830dcb70afe00%22%7D; zg_=%7B%22sid%22%3A%201662383780017%2C%22updated%22%3A%201662383858267%2C%22info%22%3A%201662383780017%2C%22superProperty%    22%3A%20%22%7B%7D%22%2C%22platform%22%3A%20%22%7B%7D%22%2C%22utm%22%3A%20%22%7B%7D%22%2C%22referrerDomain%22%3A%20%22ehall.njust.edu.cn%22%2C%22cuid%22%3A%20%22122106010798%22%7D&quot; \</span><br><span class="line">  -H &quot;Origin: http://m.njust.edu.cn&quot; \</span><br><span class="line">  -H &quot;Referer: http://m.njust.edu.cn/portal/index.html?redirect=aHR0cDovL3d3dy50YW9iYW8uY29tLw==&quot; \</span><br><span class="line">  -H &quot;User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36&quot; \</span><br><span class="line">  -H &quot;X-Requested-With: XMLHttpRequest&quot; \</span><br><span class="line">  --data-raw &quot;username=122106010798&amp;password=$&#123;PASSWD&#125;&amp;challenge=$&#123;CHALLENGE&#125;&quot; )</span><br><span class="line"></span><br><span class="line">echo $&#123;RES&#125;</span><br></pre></td></tr></table></figure><p>两段 Shell 可以写成一个脚本，这样运行一下就可以了。</p><p>这个脚本最开始是在 macOS 环境下写的。Linux 上运行是没啥问题，但是在 Windows 上就遇到麻烦了。</p><h1 id="Windows-上运行-Shell-脚本"><a href="#Windows-上运行-Shell-脚本" class="headerlink" title="Windows 上运行 Shell 脚本"></a>Windows 上运行 Shell 脚本</h1><p>Windows 面临的第一个问题就是不能直接运行 Shell 脚本，因为没有 sh ，bash 或是 zsh 这样的终端。但好消息是，这是可以自己装的。更好的消息是，安装 Git 就直接装好了这些我们需要的东西。</p><p>安装 Git 会得到我们想得到的 Shell 程序。Git 自带有 sh 和 bash。他们的目录在 <code>Git\bin\</code> 下面。找到 Git 的安装目录，把这个 bin 文件加入到系统变量里就行了。</p><p>另外我们在脚本里用了 jq，这个也是在 Windows 上没有的，需要自己安装。我这里用的是 scoop 来安装 jq。这里参考的是 <a href="https://gitee.com/glsnames/scoop-installer">scoop 在 gitee 上的镜像版</a>。gitee 上好像有好几个，用哪个都可以。</p><p>scoop 是 win 上跟 apt，homebrew 一样的东西，是个强大的包管理工具。</p><p>我们在 PowerShell 中运行以下命令来安装 scoop。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 脚本执行策略更改</span></span><br><span class="line">&gt; <span class="built_in">Set-ExecutionPolicy</span> RemoteSigned <span class="literal">-scope</span> CurrentUser</span><br><span class="line"><span class="comment"># 输入Y或A，同意</span></span><br><span class="line">&gt; Y</span><br><span class="line"><span class="comment"># 执行安装命令</span></span><br><span class="line">&gt; <span class="built_in">iwr</span> <span class="literal">-useb</span> scoop.<span class="number">201704</span>.xyz | <span class="built_in">iex</span></span><br></pre></td></tr></table></figure><p>然后换成国内源：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 更换scoop的repo地址</span></span><br><span class="line">&gt; scoop config SCOOP_REPO <span class="string">&quot;https://gitee.com/glsnames/scoop-installer&quot;</span></span><br><span class="line"><span class="comment"># 拉取新库地址</span></span><br><span class="line">&gt; scoop update</span><br></pre></td></tr></table></figure><p>然后执行安装命令就行了。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; scoop install jq</span><br></pre></td></tr></table></figure><p>这样就 OK 啦！</p><h1 id="Windows-上自动执行登录脚本"><a href="#Windows-上自动执行登录脚本" class="headerlink" title="Windows 上自动执行登录脚本"></a>Windows 上自动执行登录脚本</h1><p>这一部分搞得我也有点头大，主要是 Windows 上这个任务计划程序太难用了。</p><p>然后我发现这个可以用 schtasks 命令行来解决，于是尝试了一下，确实可以。但是自动执行之后发现校园网没登录上去。又研究了一下，发现还是要回到任务计划程序改一下才行。</p><p>首先，先在 PowerShell 上执行一个 schtasks 命令：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; schtasks /create /<span class="built_in">sc</span> minute /mo <span class="number">30</span> /tn <span class="string">&quot;autoLogin脚本&quot;</span> /tr C:\......\login.sh</span><br></pre></td></tr></table></figure><p>具体的 schtasks 命令参数我也不太清楚，随用随查吧。总之这是个创建一个每 30 分钟执行一次 login.sh 这个文件的命令。</p><p>然后这时候跑到任务计划程序（直接在搜索里面搜就能找到，或者在控制面版里面找）就能看到我们刚刚创建的任务，名字就是 <code>&quot;autoLogin脚本&quot;</code>。然后编辑一下这个任务。</p><p>首先要把 <strong>常规</strong> 选项卡下面的 <strong>使用最高权限运行</strong> 这一项勾选。然后在 <strong>触发器</strong> 选项卡里面可以编辑一下触发器，把 <strong>重复时间间隔</strong> 和 <strong>持续时间</strong> 这两项改一下。持续时间改成无限。</p><p>然后这个任务就创建成功了。正常的话每隔半小时就会执行一次。测试的时候可以先设置一个每三分钟执行一次的，看看有没有效果。</p><hr>]]></content>
      
      
      
        <tags>
            
            <tag> Windows </tag>
            
            <tag> 校园网 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Pandoc将Markdown文件转为docx格式</title>
      <link href="/2023/09/08/%E4%BD%BF%E7%94%A8%20Pandoc%20%E5%B0%86%20Markdown%20%E6%96%87%E4%BB%B6%E8%BD%AC%E4%B8%BA%20docx%20%E6%A0%BC%E5%BC%8F/"/>
      <url>/2023/09/08/%E4%BD%BF%E7%94%A8%20Pandoc%20%E5%B0%86%20Markdown%20%E6%96%87%E4%BB%B6%E8%BD%AC%E4%B8%BA%20docx%20%E6%A0%BC%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>pandoc 是一个可以将文件转换成各种格式的软件，支持 macOS ，Windows 和 Linux 。</p><p>本篇文章主要记录如何将 Markdown 文件转换成 docx 。</p><h1 id="Pandoc-的安装"><a href="#Pandoc-的安装" class="headerlink" title="Pandoc 的安装"></a>Pandoc 的安装</h1><p>可以参考 <a href="https://pandoc.org/">Pandoc 官网</a> 。</p><p>macOS 可以用 brew 安装。各个系统可以用 conda 安装。</p><p>安装完成后，在终端输入 <code>pandoc --version</code> ，如有版本信息，则安装成功。</p><p>pandoc 安装完成后，需要安装 pandoc-xnos 插件。该插件主要功能是图片、表格、公式等编号的索引。插件使用 pip 安装。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pip install pandoc-xnos</span><br></pre></td></tr></table></figure><p>pandoc 生成 pdf 文件需要使用 Letax 工具。由于我并不需要转换为 pdf，因此这里暂不详述。</p><h1 id="Markdown-格式转换为-docx"><a href="#Markdown-格式转换为-docx" class="headerlink" title="Markdown 格式转换为 docx"></a>Markdown 格式转换为 docx</h1><p>笔者尝试了一些可以将 Markdown 格式进行展示的方法，但效果都不够好。最终发现转换成 docx 格式最适合在组会上展示。</p><p>根据相关资料，pandoc 直接将 Markdown 转成 docx 格式可能会出现格式问题。因此需要先转换为 html 格式，再转换为 docx。</p><p>具体终端命令为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 转换为 html</span><br><span class="line">$ pandoc --mathml --from markdown-yaml_metadata_block &#x27;xxx.md&#x27; -o output.html</span><br><span class="line">// 转换为 docx</span><br><span class="line">$ pandoc --mathml .\output.html -o output2.docx </span><br></pre></td></tr></table></figure><p>其中，<code>--mathml</code> 用于调整公式渲染，将数学公式输出为 MathML 格式。</p><p><code>--from markdown-yaml_metadata_block</code> 用于完全解析 yaml 元数据块。</p><p>转换之后发现 docx 的公式还是有一些小问题，但是已经完全够用了。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dockerfile 搭建使用 GPU 的 tensorflow 环境</title>
      <link href="/2023/04/12/Dockerfile%20%E6%90%AD%E5%BB%BA%E4%BD%BF%E7%94%A8%20GPU%20%E7%9A%84%20tensorflow%20%E7%8E%AF%E5%A2%83/"/>
      <url>/2023/04/12/Dockerfile%20%E6%90%AD%E5%BB%BA%E4%BD%BF%E7%94%A8%20GPU%20%E7%9A%84%20tensorflow%20%E7%8E%AF%E5%A2%83/</url>
      
        <content type="html"><![CDATA[<div class="note info simple"><p>摘要：Dockerfile 以前一直想看看是怎么写的，但是总忘。前一阵子在给实验室的服务器配环境，突然想起来用 dokcer 给每个同学开个虚拟环境，于是就研究了一下。这篇帖子就是总结一下我学到了什么些玩意。</p></div><h1 id="Dockerfile-的构成。"><a href="#Dockerfile-的构成。" class="headerlink" title="Dockerfile 的构成。"></a>Dockerfile 的构成。</h1><p>以下写一些主要会用到的。</p><ul><li><p>FROM：镜像从哪里来</p><p>比如想拉一个 tensorflow 的官方镜像，就可以这样写：</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FROM tensorflow/tensorflow:latest-gpu</span><br></pre></td></tr></table></figure><ul><li><p>MAINTAINER：镜像维护者信息</p><p>虽然我也没搞明白这个具体有什么用，但是似乎是这样写的：</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MAINTAINER &lt;name&gt;</span><br></pre></td></tr></table></figure><ul><li><p>RUN：构建镜像执行的命令，每一次RUN都会构建一层</p><p>这个应该属于重中之重了。语法比较简单，直接写 shell 命令就可。需要注意的是，比较好的习惯应该是一层 RUN 中执行很多条命令，而不是每条命令都在独立的一层 RUN 中。</p><p>可以用 <code>\</code> 作为结尾，在下一行开头使用 <code>&amp;&amp;</code> 来实现多个命令的执行。</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">RUN apt-get update \</span><br><span class="line">&amp;&amp; apt-get install vim</span><br></pre></td></tr></table></figure><ul><li><p>CMD：容器启动的命令，如果有多个则以最后一个为准，也可以为ENTRYPOINT提供参数</p></li><li><p>ENV：变量属性值，容器内部也会起作用</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ENV &lt;key&gt; &lt;value&gt;</span><br><span class="line">ENV &lt;key1&gt;=&lt;value1&gt; &lt;key2&gt;=&lt;value2&gt;...</span><br></pre></td></tr></table></figure><ul><li><p>ADD：添加文件，如果是压缩文件也解压</p></li><li><p>COPY：添加文件，以复制的形式</p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>树莓派局域网共享打印机</title>
      <link href="/2023/03/13/%E6%A0%91%E8%8E%93%E6%B4%BE%E5%B1%80%E5%9F%9F%E7%BD%91%E5%85%B1%E4%BA%AB%E6%89%93%E5%8D%B0%E6%9C%BA/"/>
      <url>/2023/03/13/%E6%A0%91%E8%8E%93%E6%B4%BE%E5%B1%80%E5%9F%9F%E7%BD%91%E5%85%B1%E4%BA%AB%E6%89%93%E5%8D%B0%E6%9C%BA/</url>
      
        <content type="html"><![CDATA[<p>摘要：安装 hplip，cups，以及一些报错问题的解决方法。</p><h1 id="安装相关软件"><a href="#安装相关软件" class="headerlink" title="安装相关软件"></a>安装相关软件</h1><h2 id="hplip"><a href="#hplip" class="headerlink" title="hplip"></a>hplip</h2><p>惠普打印机在 Linux 系统上有一个软件驱动程序，hplip。</p><p>这个软件默认是命令行，可以额外安装 gui。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt install hplip</span><br></pre></td></tr></table></figure><p>如果想安装 gui，可以额外运行以下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt install hplip-gui</span><br></pre></td></tr></table></figure><h2 id="cups"><a href="#cups" class="headerlink" title="cups"></a>cups</h2><p>cups 是一个 Linux 上的通用打印系统，使用网页进行操作。</p><p>首先安装 cups：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt install cups</span><br></pre></td></tr></table></figure><p>安装完成之后，对 cups 进行启动：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ service cups start</span><br></pre></td></tr></table></figure><p>随后通过浏览器进行访问。访问网址：<code>http://localhost:631</code></p><p>打开之后，可以看到以下截面：</p><p><img src="https://imagebed-1305813402.cos.ap-nanjing.myqcloud.com/images/2023_3_13_1.png" alt="2023_3_13_1.png"></p><p>如果打印机正常被驱动，点击导航栏中的 Printers 项，可以找到自己的打印机。</p><p>如果没有被正常驱动，可以选择第二列中的 Adding Printers and Classes 来手动添加打印机。</p><p>为了在局域网进行共享，需要切换到 Administration 界面中，将以下两个部分勾选：</p><p><img src="https://imagebed-1305813402.cos.ap-nanjing.myqcloud.com/images/2023_3_13_2.png" alt="2023_3_13_2.png"></p><p>随后点击 Change Setting 刷新即可。</p><h1 id="Windows-中设置打印机"><a href="#Windows-中设置打印机" class="headerlink" title="Windows 中设置打印机"></a>Windows 中设置打印机</h1><p>在 Windows 中，打开设置，点击添加打印机和扫描仪，就可以找到共享的打印机。</p><p><img src="https://imagebed-1305813402.cos.ap-nanjing.myqcloud.com/images/2023_3_13_3.png" alt="2023_3_13_3.png"></p><p>如果这里找不到，可以点击添加设备，点开添加打印机，在这里输入打印机地址。打印机地址可以仿照图片中格式填写。具体的打印机名称可以在 cups 中查看。</p><p><img src="https://imagebed-1305813402.cos.ap-nanjing.myqcloud.com/images/2023_3_13_4.png" alt="2023_3_13_4.png"></p><h1 id="遇到报错"><a href="#遇到报错" class="headerlink" title="遇到报错"></a>遇到报错</h1><p>如果打印文件时发现，打印机不工作，同时 cups 的管理页面中发现 jobs 中出现 “# Filter failed” 报错，则可以采取以下方法解决：</p><p>在树莓派命令行中输入以下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo hp-plugin</span><br></pre></td></tr></table></figure><p>安装提示一路执行即可。</p><p>安装完毕之后问题即解决。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Raspberry Pi </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一切都是为了自己的Chatgpt</title>
      <link href="/2023/03/01/%E4%B8%80%E5%88%87%E9%83%BD%E4%B8%BA%E4%BA%86%E8%87%AA%E5%B7%B1%E7%9A%84Chatgpt/"/>
      <url>/2023/03/01/%E4%B8%80%E5%88%87%E9%83%BD%E4%B8%BA%E4%BA%86%E8%87%AA%E5%B7%B1%E7%9A%84Chatgpt/</url>
      
        <content type="html"><![CDATA[<p><strong>这是 2023-03-01 的写点啥</strong></p><hr><p>以前的时候大伙经常说一句话：“正经人谁写日记啊。”于是日记这种东西似乎就被人遗忘了。但最近，因为Chatgpt的大火，我又突然想把这东西从记忆的故纸堆里捡起来。算一算，我大概也好多年没写日记了，上一次能长时间坚持下来还是高中的时候。</p><p>突发奇想，我想给自己训练一个gpt模型出来，创造一个能像我一样说话的bot。这需要大量的语料数据，显然平时不会怎么动笔的我是没有这么多数据的。QQ和微信的聊天记录应该也可以拿来训练，但是一是我平时网上聊天发的消息高度碎片化，二是这些数据能不能搞出来还是一个问题。因此，最好的数据就是平时写下的一些文字。如果以前有这样的习惯，那很好，数据都是现成的。如果没有，那俗话说的好：种一棵树最好的世界是十年前，其次是现在。既然不能凭空变出来文字，或者时间回溯，那我只能现在开始发力了。这大概就是我今年能拿起笔——或者说拿起键盘的主要动力。凡事有动力就好说，起码能坚持一段时间。但愿吧。</p><p>关于以后记述的内容，还没想好，但大概是把脑子里的一些想法写出来。感觉脑子里的想法有时候不少，但是没有写下来的过程，就没有一次总结和回忆的过程，时间久了脑子就像是垃圾堆，好的坏的都积在一起，早晚有一天得报废。写下来的过程就是整理一下，把脑子收拾收拾，不好的丢掉，好的留下来，不然脑子迟早生锈不转了。</p><p>我自认为现在学习能力还挺强的，但是只有输入，没有输出，缺少一个思考的过程，锻炼的环节。以后还是应该多写写，把自己学到的，想到的，都写下来，不管有没有人看，算是给时间留下点痕迹。</p><p>以前也做过类似的事，但大部分都是半途而费。反人性的事情确实不好搞。希望这一次能坚持得更久一些吧。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>服务器使用docker搭建TeamSpeak服务器</title>
      <link href="/2022/10/16/%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%BD%BF%E7%94%A8docker%E6%90%AD%E5%BB%BATeamSpeak%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
      <url>/2022/10/16/%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%BD%BF%E7%94%A8docker%E6%90%AD%E5%BB%BATeamSpeak%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<div class="note info simple"><p>以下操作均在 <code>ubuntu20.04</code>环境中。默认服务器已经安装好docker。</p></div><p>teamspeak的docker镜像是可以直接拉取的，因此不用在ts的官网上下载客户端。</p><p>ssh连接服务器，输入以下指令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker run -dit -p 9987:9987/udp -p 10011:10011 -p 30033:30033 -e TS3SERVER_LICENSE=accept teamspeak</span></span><br></pre></td></tr></table></figure><p>如果是在云服务器上，修改服务器的防火墙配置。</p><p>注意9987端口是udp连接，其他两个端口是tcp连接。</p><p>此时用ts客户端进行连接，address写服务器ip，发现已经可以连接。</p><p>ts管理员需要密钥认证，我们可以在docker的日志中查看密钥。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看所有容器</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker ps -a</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">记住ts服务器<span class="built_in">id</span>，查看日志</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker logs -f [docker_id]</span></span><br></pre></td></tr></table></figure><p>此时记录下ts服务器的token。</p>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>远程直接进入docker并且打开docker的X11</title>
      <link href="/2022/10/14/%E8%BF%9C%E7%A8%8B%E7%9B%B4%E6%8E%A5%E8%BF%9B%E5%85%A5docker%E5%B9%B6%E4%B8%94%E6%89%93%E5%BC%80docker%E7%9A%84X11/"/>
      <url>/2022/10/14/%E8%BF%9C%E7%A8%8B%E7%9B%B4%E6%8E%A5%E8%BF%9B%E5%85%A5docker%E5%B9%B6%E4%B8%94%E6%89%93%E5%BC%80docker%E7%9A%84X11/</url>
      
        <content type="html"><![CDATA[<div class="note info simple"><p>以下操作均在 <code>ubuntu20.04</code>环境中。打开x11图形化窗口的前提是本地已经安装好x11环境。</p></div><p>如果需要远程的是已经存在的docker，首先提交一个当前docker的镜像，然后再重新创建容器。</p><p>如果是新建docker容器，则直接创建容器即可。</p><p>注意创建容器的时候指定映射容器的22号端口，以便我们可以直接ssh进入docker。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">对于已经存在的docker容器：</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">提交docker镜像</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker commit [docker_id] &lt;自定镜像名&gt;</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">根据存在的镜像创建容器</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker run -dit -p 2221:22 &lt;自定镜像名&gt; /bin/bash</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">对于新建的docker容器</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker run -dit -p 2221:22 ubuntu:20.04 /bin/bash</span></span><br></pre></td></tr></table></figure><p>进入docker后，设置root用户密码，安装x11环境，安装 <code>ssh-server</code>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置root用户密码</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">passwd</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">更新apt</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">apt-get upgrade</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">apt-get update</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装x11环境</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">apt install xorg</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装ssh-server</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">apt-get install openssh-server</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重启ssh</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">service ssh restart</span></span><br></pre></td></tr></table></figure><p>若执行命令 <code>service ssh restart</code>时出现以下错误:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sshd: no hostkeys available -- exiting.</span><br></pre></td></tr></table></figure><p>解决方法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ssh-keygen -A</span></span><br></pre></td></tr></table></figure><p>若出现以下错误：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Missing privilege separation directory: /run/sshd</span><br></pre></td></tr></table></figure><p>解决方法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">mkdir</span> /run/sshd</span></span><br></pre></td></tr></table></figure><p>修改ssh配置文件 <code>/etc/ssh/sshd_config</code>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">vim /etc/ssh/sshd_config</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">找到并修改成以下内容</span></span><br><span class="line">PermitRootLogin yes</span><br><span class="line">AllowTcpForwarding yes</span><br><span class="line">X11Forwarding yes</span><br></pre></td></tr></table></figure><p>打开 <code>terminal</code>，并且ssh尝试远程进入 <code>docker</code>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">输入 -Y 参数来打开 x11</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ssh -Y root@[server_ip] -p 2221</span></span><br></pre></td></tr></table></figure><p>如果能成功进入，测试x11.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">xclock</span></span><br></pre></td></tr></table></figure><p>如果弹出时钟界面，则已经成功。</p><p>如果此时报出以下错误：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Error: Can&#x27;t open display:</span><br></pre></td></tr></table></figure><p>则重新编辑文件 <code>/etc/ssh/sshd_config</code>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">找到并修改成以下内容</span></span><br><span class="line">X11UseLocalhost no</span><br></pre></td></tr></table></figure><p>重启ssh服务，再次测试即可。</p>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> X11 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu 环境下docker中安装Bochs</title>
      <link href="/2022/10/14/Ubuntu%20%E7%8E%AF%E5%A2%83%E4%B8%8Bdocker%E4%B8%AD%E5%AE%89%E8%A3%85Bochs/"/>
      <url>/2022/10/14/Ubuntu%20%E7%8E%AF%E5%A2%83%E4%B8%8Bdocker%E4%B8%AD%E5%AE%89%E8%A3%85Bochs/</url>
      
        <content type="html"><![CDATA[<p>拉取docker镜像并进入容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker pull ubuntu:20.04</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker run -dit ubuntu:20.04</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker <span class="built_in">exec</span> -it [docekr_id] bash</span></span><br></pre></td></tr></table></figure><p>从<a href="https://bochs.sourceforge.io/">Bochs官网</a>下载Bochs的压缩包<br>传入docker中，解压</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在主机环境中输入命令</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker <span class="built_in">cp</span> &lt;文件主机中路径&gt; [docker_id]:&lt;docker容器中路径&gt;</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在docker容器中输入命令</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">tar zxvf bochs-[版本号].tar.gz</span></span><br></pre></td></tr></table></figure><p>然后编译安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span> bochs-[版本号]</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">$ ./configure --enable-debugger --enable-disasm <span class="comment"># 参数 --enable-disasm 在2.7版本中已经去掉了</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">./configure --enable-debugger</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#######################################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果此时报错以下内容：</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">X windows gui was selected, but X windows libraries were not found.</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">可以输入以下命令：</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">$ sudo apt-get install libx11-dev xserver-xorg-dev xorg-dev</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#######################################################</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">make</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo make install</span> </span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> Ubuntu </tag>
            
            <tag> Bochs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>游记 ｜ 成都</title>
      <link href="/2022/06/22/%E6%88%90%E9%83%BD%E6%B8%B8%E8%AE%B0/"/>
      <url>/2022/06/22/%E6%88%90%E9%83%BD%E6%B8%B8%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>2022年6月15日，我们乘坐航班从南京抵达了成都天府机场。</p><p>天府机场在四川省简阳市，离我们的目的地成都还有相当长的一段距离。下飞机后我们乘上了一辆接驳车，来到曾经接驳车的停靠位的外面：这里现在已经由无数隔离带，标示牌和入站的旅客塞满了。扫过入川码做过核酸，我们进入了天府机场的候机厅。说实话这么多人在这里挤来挤去，做不做核酸意义不大，有一个感染者大家全都寄了。</p><p>天府机场到成都市中心的天府广场要乘坐一个多小时的地铁。这段路程枯燥又无聊，我还背着沉重的行李，每时每刻都在期待着下一秒就能到达目的地。</p><p>成都的天气还是不错，从我们到达的第一天起，没有下过大雨，也少有天晴日丽，每天都是阴阴沉沉，很适合户外活动。因为不是自己一个人出来玩，所以并不能选择到什么偏僻的地方去，大伙可能更想体验成都的现代化而非历史或者民俗什么的。在成都游玩的这几天我也能感受到，我被同行的几位同学称作“遛弯侠”，而我只是希望能在路途中走过更多地方，看看那里是什么样子的。同行的同学似乎并不这么想，只想快点乘地铁回我们住的民宿附近找点东西吃。我想以后旅行最好还是自己或者和有共同兴趣的人一起。</p><p>在6月21号离开以前，我们其实并没有去多少成都的景点，第一天去成华区转了转；第二天去了大熊猫繁殖基地，傍晚去了锦里；第三天早上和铁姐碰了面，然后去杜甫草堂和四川省博物院，傍晚简单去了一下人民公园，我和铁姐又逛了成都博物馆，晚上在宽窄巷子吃了点东西；第四天下午继续和铁姐逛成都博物馆；第五天去了都江堰和青城山，没到老君阁就因为记错了缆车的时间而返回了。可以说这次旅行并没有完全达到我的预期，去过的地方有点少。但也好，给我下次造访成都留个理由。</p><p>成都的现代化设施修建得还是十分不错的，看起来比南京繁华多了。最让我震惊的是天府广场下那几条隧道，从市中心穿过，里面甚至跑出来了载着挖掘机的卡车。成都的开放和包容也让我记忆尤深，市中心能看到推车卖瓜的爷爷，挑着扁担卖什么糖的大叔，摩天大楼下路边一排排的桌椅，坐满了顾客，到夜里十一点也依旧人声鼎沸。这一切都让我觉得十分不可思议，原来一座繁华的城市可以有如此强的市井气息。我能感受到生活在这里的人们是多么得安逸且自由。我开始羡慕这里的人们。</p><p>而与此形成对比的是，成都的历史向来是苦难的，经历过无处次大规模的战乱，千百年来迁入成都平原的百姓难以计算，也许这就是造成成都如此下里巴人的原因吧。不同的文化在此交融碰撞，最终又形成了一种独特的文化。她是如此的令人着迷，引入入胜，可以说我已经完全折服于她的脚下了。</p><p>我很喜欢成都，因为这里的美食很和我口味，因为这里的人们善良而朴实，因为城市繁华而平易近人。我喜欢这里安逸的生活，不用像东南沿海那样，每天都疲于奔命。其实在成都疲于奔命也可以，可以在忙碌的间隙中享受安逸的氛围。来过成都才知道这里为什么是天府之国，我只能说名副其实。</p><p>成都很适合生活。这里物价更低，房价也更低，虽然工资也更低，但生活在这里，幸福感会更高，虽然只住了几天，我还是能感受到强烈的幸福。我很向往这座城市。我期待着下一次与她重逢。</p><p>离开成都的时候，我们来到了火车北站。看到这破败的候车大厅，里面挤满了形形色色的旅客，我有点恍惚，想起小时候京沈线上年年关内外迁徙的记忆。过了二十年，这样的景象依然在这片土地上发生着。我不知道应该高兴还是难过。我只希望记忆中那种火车上的令人难忘的经历不会出现在今天的孩子的记忆中了。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>致谢｜2022年5月</title>
      <link href="/2022/05/20/%E6%9C%AC%E7%A7%91%E6%AF%95%E8%AE%BE%E8%87%B4%E8%B0%A2/"/>
      <url>/2022/05/20/%E6%9C%AC%E7%A7%91%E6%AF%95%E8%AE%BE%E8%87%B4%E8%B0%A2/</url>
      
        <content type="html"><![CDATA[<blockquote><p>这是我本科毕业设计的致谢。虽然毕设就那么回事，但这毕竟是本科四年时光的最后一笔，所以我很认真地写完了这一篇致谢。</p></blockquote><h1 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h1><p>已经到了大学生涯的尾声，回想这漫长而又短暂的四年，能在18年的夏天来到南理工，遇到这些志同道合的朋友，拥有这么难忘的经历，我确实能感受到幸运和充实。我向这四年里所有关心过帮助过我的人表达最诚挚的谢意。</p><p>感谢我的导师周俊龙老师。周老师在毕业设计上给予了我莫大的帮助，有周老师耐心而又细致的指导，我才能顺利地完成毕业设计。周老师秉持严谨的治学态度和实事求是的学术作风，是我在今后的工作和学习生涯中要努力学习的榜样。</p><p>感谢我的家人，在这四年的求学路上，你们给予了我无条件的物质和精神上的支持。此生能拥有你们，我感到无比的幸福和骄傲。</p><p>感谢我的挚友李彦博，是他带我熟悉南京这座城市，一起生活学习，一起参加比赛，数次熬夜到天空泛白。酒逢知己千杯少，感谢他能在这四年里和我并肩前进。</p><p>感谢我所有的朋友们。感谢杨易钊，给我带来无数的欢乐，是我登紫金山最信任的队友。感谢刘珂鸣，在我转到计算机专业后陪我上课和学习。感谢我现在511的室友和曾经510的室友，四年来给了我不少照顾，推免路上互相鼓励的日子还历历在目。感谢曾经的辅导员沈铁男，在学习生活上和学生工作上都给了我很大的帮助。感谢黄河儒及503，509寝室的朋友们在闲暇时间的陪伴。</p><p>感谢曹国老师，给了我走上计算机专业道路的机会。感谢黄锦安老师，他兢兢业业的教学态度让我受益匪浅，能成为他教过的学生，我感到三生有幸。</p><p>此外，我还要感谢李丽颖，耐心地解答了我的问题，给我的毕业设计带来很大的启发。感谢何宇辰，在论文方面给了我很多建设性的意见。感谢许妍，在完成论文的过程中一直想办法给我动力。感谢我的电脑，在完成毕设的过程平稳运行，没有出现任何问题。</p><p>感谢我自己，感谢自己这四年没有虚度光阴，找到了前行的方向，也算有所收获。</p><p>感谢我的母校南京理工大学，感谢四年来学校对我的悉心培养。</p><p>最后，谨向百忙之中评阅本文和参与答辩的老师们致以崇高的敬意和衷心的感谢。</p><p>此时，桌前的时钟刚刚跳过零点，南理工的夜晚总是如此宁静。人生的时钟也即将跳过它的零点。感谢四年里相遇的一切，新的一天即将到来，我们有缘再会。</p><p>2022年5月19日</p>]]></content>
      
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>随笔几则</title>
      <link href="/2022/05/05/%E9%9A%8F%E7%AC%94%E5%87%A0%E5%88%99/"/>
      <url>/2022/05/05/%E9%9A%8F%E7%AC%94%E5%87%A0%E5%88%99/</url>
      
        <content type="html"><![CDATA[<h1 id="5-5日"><a href="#5-5日" class="headerlink" title="5.5日"></a>5.5日</h1><p>今日阳光是非常好，果然已经是立夏了。但是早晨出门还是需要拿上外套，实验室的空调很有办公室的感觉，坐上一天会冻到感冒。</p><p>上午写完了实验室服务器使用说明书的 macOS 系统部分，师兄着急得很，昨天就一直在催了，然而我似乎是组里唯一一个主力电脑用 Mac 的同学，所以这部分说明书是给我自己写的。说明书有些语焉不详的地方，我也一并做了订正。师兄似乎并没有比我更熟悉 Linux 系统的命令，出了些显而易见的错误。</p><p>下午是毕设时间，论文已经写了六千字，但只写完了两章，还有三四章的内容。今天解决了将 Latex 公式复制到 Word 不能正确显示的问题，并且把前两章的内容转移到 Word 里，一共是六页半，一张图都没有。毕设模型的方法论述和结果还没写，只是简单调整了后面章节的内容安排。模型的代码又进行了修改，现在应该能满足老师要求的“比对比实验有较大提升”了。</p><p>老师又安排的新的任务，下周一的组会没有取消，只是推迟了半个小时，因为美国的那位老师那天要出差。美国人不是都很重视个人时间的吗？白天都出差了晚上还要开会，令人费解。于是周日前要把组会上要讲的 PPT 做出来，还好论文是上周看过的一篇，但是它有三十五页。今天进度为零。</p><p>好消息是今天心情好了不少，没有过去几天那么压抑，虽然工作还是挺多的。老师似乎并不在意我们毕设进度如何，在他眼里可能毕设真的不算什么，他更关心我们组会准备得怎么样，论文看了多少。其他同学都只要专心搞毕设，而我和同门的同学要双线程，压力真的不小。毕设进度按照计划已经延迟超过一周了，而且预计还会继续延迟下去。</p><p>今天最快乐的时间是晚上，拜托同学去顺丰帮我把胶卷拿回来了，书架上这台老相机又一次拥有了灵魂，找回了它存在的意义。之前它一直只能做一个摆件。我觉得用胶卷相机拍照和生活很像，按下快门之后，在胶卷被冲洗出来之前，没人知道拍出来的照片是什么样的。</p><p>明天简单计划一下。PPT 需要做出来一个初稿；毕设希望能再继续推进一章；多喝水。</p><h1 id="5-6日"><a href="#5-6日" class="headerlink" title="5.6日"></a>5.6日</h1><p>今天天气很好，已经三十度了，换上了短裤。但是实验室里很冷，得穿上长袖。</p><p>一整天都在做组会的 PPT，还好做完了，虽然大概率会被老师打回来修改。每次准备组会我花费的时间总是比同门的同学多不少，是我运气不好还是被针对了？</p><p>毕设依然是没有进展，提交时间已经定在了二十号。我恐怕是真的快毕不了业了。希望这种事不要发生。六月二日答辩结束。时间过得真快啊，马上又要毕业了。</p><p>今天听阿钊说，他的 offer 已经基本下来了。南京国企，离学校不是很远，还好，还能再见面，不知他以后工作忙不忙。海冬也要回东阳了，去电信工作，希望他工作了之后电竞事业也不要荒废。</p><p>中午也和铁姐微信上聊了聊。似乎已经很久没聊过了，也没问她工作如何，看起来应该还在家里。</p><p>明天收拾一下屋子，不用的东西要卖掉了。</p><h1 id="5-8日"><a href="#5-8日" class="headerlink" title="5.8日"></a>5.8日</h1><p>周末过得真是快，感觉什么也没做。</p><p>昨天白天一直在搞个人网站，现在已经基本可以用了，但是域名备案一直不行，因为工信部数据库目前查不到档案。到今天为止，域名依然无法访问，真是令人头大啊。新的域名起了个还行的名字，fruiteebag 水果茶包，本来打算叫水果茶壶的，但是这个也行，回头等在境外建站了可以叫 fruiteepot。</p><p>昨天毕设进度推进到了第三章，今天也写了一点，第三章大概写了一千多字了。然而现在毕设最大的问题是没有图表，凑不够页数。明天改完ppt再看一下。</p><p>今天老师对我做的ppt进行了点评，简单的说就是逻辑上出了问题。老师给我讲，说讲论文应该着重于 Why，而不是 How。主要的逻辑应该是先讲 What，即遇到了什么问题；然后是 Why，即为什么要解决这个问题，最后才是 How，即怎样解决了问题。感觉我在这个方面理解还是有所欠缺，只是单纯按照论文的推导过程来做 ppt，被牵着鼻子走。明天还是重新修改一下。</p><p>今天晚上主要工作是卖书，累个半死，五点多刚摆摊的时候居然被通知六点就要收摊，学校保卫处是真一点人事都不干啊，导致我们耽误了很长时间在犹豫要不要把后续的书搬过去，最后还是无视清场的要求继续卖下去了。卖掉大概一百本书，还有一个板子，一个四轴飞行器，总价值接近七百块。板子一百二就卖了，还好有个兄弟识货，给他便宜了几十。除去大件的收入，剩余的五百块钱我们就打算作为宿舍剩余两个月的电费和散伙饭的饭钱。</p><p>马上就要毕业了，还真是舍不得。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>踩坑日记 | algs4.jar 包的配置</title>
      <link href="/2021/10/31/%E8%B8%A9%E5%9D%91%E6%97%A5%E8%AE%B0%20%20algs4.jar%20%E5%8C%85%E7%9A%84%E9%85%8D%E7%BD%AE/"/>
      <url>/2021/10/31/%E8%B8%A9%E5%9D%91%E6%97%A5%E8%AE%B0%20%20algs4.jar%20%E5%8C%85%E7%9A%84%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<p>笔者最近在看 <code>Algorithms (Fourth Edition)</code> 这本书，想做一下练习，于是开始配这本书写的环境。这书的练习都是 <code>Java</code>写的，需要调用一些作者自己写的类。作者在官网上给出了已经包括全部类的 <code>jar</code> 包，然而笔者发现导入之后并不能用，一直报错，属实折磨，在网上找到的资料也并不能解决笔者遇到的问题。最后还是参考作者在网站上写的内容稍加修改解决了。</p><hr><h1 id="下载-algs4-jar"><a href="#下载-algs4-jar" class="headerlink" title="下载 algs4.jar"></a><strong>下载 algs4.jar</strong></h1><p>访问 <code>Algorithms</code> 这本书的<a href="https://algs4.cs.princeton.edu/home/">官网</a>，在左侧的导航栏选择 Code 页面。</p><p>一直下滑，直到找到高亮的 <code>algs4.jar</code> ，点击超链接即可下载。</p><p>下载好后要将得到的 <code>algs4.jar</code> 放在指定目录下，官网给出的目录为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/lift/lib/algs4.jar</span><br></pre></td></tr></table></figure><p>这个是使用作者提供的自动安装工具下载的目录。考虑到境外网站一向不稳定，笔者并没有安装和使用这个工具。</p><p>笔者下载完毕 <code>algs.jar</code> 后，将其放在的目录为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/Users/<span class="string">&quot;yourUserName&quot;</span>/Library/Java/Extensions/algs4.jar</span><br></pre></td></tr></table></figure><p>没有文件夹的其实可以新建一个。</p><h1 id="配置-IDEA-环境"><a href="#配置-IDEA-环境" class="headerlink" title="配置 IDEA 环境"></a><strong>配置 IDEA 环境</strong></h1><p>打开 IDEA，新建一个项目。笔者这里新建的项目中的文件为 <code>Test.java</code> 。</p><p>点击顶部的 <code>File</code> 选项卡，在下拉菜单中点击 <code>Project Structure</code> 。</p><p>点击 <code>Library</code> 选项卡，选择加号，<code>New Project Library</code> 。在目录中找到 <code>algs4.jar</code> 并选中，添加成功后选择 <code>Apply</code> 和 <code>OK</code> 确认。</p><p>在右上角调整好正确的 <code>Run/Debug Configuration</code> 。此时在 <code>Test.java</code> 中写入以下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> edu.princeton.cs.algs4.*;</span><br></pre></td></tr></table></figure><p>如果没有报错，即配置成功。</p><p>但是到这里程序依然是无法运行的，因为我们需要在命令行对程序进行编译和运行。如果此时直接在命令行输入 <code>javac Test.java</code> 进行编译，会有以下报错：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">import edu.princeton.cs.algs4.*;</span><br><span class="line">^</span><br><span class="line">Test.java:6: 错误: 找不到符号</span><br><span class="line">        Point2D[] ps = new Point2D[N];</span><br><span class="line">        ^</span><br><span class="line">  符号:   类 Point2D</span><br><span class="line">  位置: 类 Test</span><br><span class="line">Test.java:6: 错误: 找不到符号</span><br><span class="line">        Point2D[] ps = new Point2D[N];</span><br><span class="line">                           ^</span><br><span class="line">  符号:   类 Point2D</span><br><span class="line">  位置: 类 Test</span><br><span class="line">Test.java:9: 错误: 找不到符号</span><br><span class="line">            double x = StdRandom.uniform();</span><br><span class="line">                       ^</span><br><span class="line">  符号:   变量 StdRandom</span><br><span class="line">  位置: 类 Test</span><br><span class="line">Test.java:10: 错误: 找不到符号</span><br><span class="line">            double y = StdRandom.uniform();</span><br><span class="line">                       ^</span><br><span class="line">  符号:   变量 StdRandom</span><br><span class="line">  位置: 类 Test</span><br><span class="line">Test.java:11: 错误: 找不到符号</span><br><span class="line">            ps[i] = new Point2D(x, y);</span><br><span class="line">                        ^</span><br><span class="line">  符号:   类 Point2D</span><br><span class="line">  位置: 类 Test</span><br><span class="line">6 个错误</span><br></pre></td></tr></table></figure><p>所以需要继续配置 <code>zsh</code> 。</p><h1 id="配置-zsh-环境变量"><a href="#配置-zsh-环境变量" class="headerlink" title="配置 zsh 环境变量"></a><strong>配置 zsh 环境变量</strong></h1><p>其实这里可以不配置环境变量，不过每次命令行编译都需要输入以下一大长串。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ javac -<span class="built_in">cp</span> .:/Users/<span class="string">&quot;yourUserName&quot;</span>/Library/Java/Extensions/algs4.jar Test.java</span><br><span class="line"></span><br><span class="line">$ java -<span class="built_in">cp</span> .:/Users/<span class="string">&quot;yourUserName&quot;</span>/Library/Java/Extensions/algs4.jar Test</span><br></pre></td></tr></table></figure><p>这可真是太不方便了。虽然可以自己写个脚本，但还是很麻烦。根据作者官网的说明，可以配置一下环境变量，然而作者写的说明并不包括 <code>zsh</code> 的配置。所以这里笔者给出 <code>zsh</code> 的配置说明。</p><p>将以下代码加入到文件 <code>~/.zshrc</code> 中（如果没有就自己建一个）。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> CLASSPATH=<span class="variable">$CLASSPATH</span>:/Users/<span class="string">&quot;yourUserName&quot;</span>/Library/Java/Extensions/algs4.jar</span><br></pre></td></tr></table></figure><blockquote><p>这里的 <code>algs.jar</code> 的路径要写对。如果你一直按照我的说明来，那就是这个路径。如果你有自己的想法，那写你自己的路径。</p></blockquote><p>配置完成后，在 <code>Test.java</code> 文件目录中打开终端，输入以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ javac Test.java</span><br><span class="line"></span><br><span class="line">$ java Test</span><br></pre></td></tr></table></figure><p>如果没有报错，成功运行，那么恭喜你，配置完成。</p>]]></content>
      
      
      
        <tags>
            
            <tag> macOS </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>M1 Mac 安装 Java</title>
      <link href="/2021/10/30/M1%20Mac%20%E5%AE%89%E8%A3%85%20Java/"/>
      <url>/2021/10/30/M1%20Mac%20%E5%AE%89%E8%A3%85%20Java/</url>
      
        <content type="html"><![CDATA[<p>最近要重新用一下 Java ，本来电脑里是有一个的，奈何发现 javac 用不了了，查了一下也没搞清楚为啥，总之直接重装了一个，正好换了个版本。为了防止下次再出现类似于忘了去哪找安装包的事情，笔者决定还是写下来，毕竟好记性不如烂笔头（也许应该说好记性不如烂键盘？）。</p><hr><h1 id="卸载已有-JDK"><a href="#卸载已有-JDK" class="headerlink" title="卸载已有 JDK"></a><strong>卸载已有 JDK</strong></h1><p>众所周知，Mac 环境里是可以安装多个 JDK 的。</p><p>打开终端，输入以下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls /Library/Java/JavaVirtualMachines/</span><br></pre></td></tr></table></figure><p>然后就可以看见电脑上安装的 JDK 版本。</p><p>卸载 JDK 就很简单，在终端继续输入命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo rm -rf /Library/Java/JavaVirtualMachines/jdk1.7.0_79.jdk</span><br><span class="line"></span><br><span class="line">//最后 JDK 名字替换成刚才找到的，这里是个例子</span><br></pre></td></tr></table></figure><p>继续输入密码，即可成功删除。</p><p>可以在终端输入指令 <code>java -version</code> 来检查是否成功卸载。</p><h1 id="安装新的-JDK"><a href="#安装新的-JDK" class="headerlink" title="安装新的 JDK"></a><strong>安装新的 JDK</strong></h1><p>目前支持 <code>M1</code> 芯片 有 <code>Zulu JDK</code> ，<a href="https://www.azul.com/downloads/?version=java-11-lts&os=macos&architecture=arm-64-bit&package=jdk">下载网址</a>。</p><p>在网页中点击 <code>Choose Your Download</code> ，进入下个页面，选择你希望有的配置。下个 <code>dmg</code> 版本就挺好的。</p><p>下载好后安装，走完步骤。</p><p>检查是否安装成功的方法和检查是否删除成功的一样，在终端输入指令 <code>java -version</code> 即可。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">java -version</span></span><br><span class="line"></span><br><span class="line">openjdk version &quot;11.0.13&quot; 2021-10-19 LTS</span><br><span class="line"></span><br><span class="line">OpenJDK Runtime Environment Zulu11.52+13-CA (build 11.0.13+8-LTS)</span><br><span class="line"></span><br><span class="line">OpenJDK 64-Bit Server VM Zulu11.52+13-CA (build 11.0.13+8-LTS, mixed mode)</span><br></pre></td></tr></table></figure><p>这就算成功了。</p><p><code>Zulu JDK</code> 默认安装在 <code>/Library/Java/JavaVirtualMachines</code> 目录下。</p><hr><p>到这差不多也就完事了，现在能用了。</p>]]></content>
      
      
      
        <tags>
            
            <tag> macOS </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GitHub_Pages + hexo 搭建个人博客</title>
      <link href="/2021/10/25/GitHub_Pages%20+%20hexo%20%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
      <url>/2021/10/25/GitHub_Pages%20+%20hexo%20%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<p>本文只是简单记录一下笔者在使用 hexo 框架搭建个人博客时的操作过程和遇到的一些问题。由于笔者水平有限，遇到困难全靠百度和摆烂，所以本文纯属娱乐，八成是没什么用的。如果真的能给你带来一些帮助，笔者不胜荣幸。</p><p>笔者运行环境</p><ul><li>macOS Big Sur 11.6</li></ul><hr><h1 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a><strong>前期准备</strong></h1><h2 id="创建-GitHub-仓库"><a href="#创建-GitHub-仓库" class="headerlink" title="创建 GitHub 仓库"></a><strong>创建 GitHub 仓库</strong></h2><p>在 GitHub 创建一个新的 <code>repository</code>，名字命名为以下格式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;yourGithubName&quot;.github.io</span><br></pre></td></tr></table></figure><p>设置为公共仓库，其他设置默认即可。</p><h2 id="在本地配置git"><a href="#在本地配置git" class="headerlink" title="在本地配置git"></a><strong>在本地配置git</strong></h2><p>在本地安装好 git 工具，在 macOS 上的安装方法为在终端输入以下命令：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>brew install git </span><br></pre></td></tr></table></figure><p>如果 brew 命令无效，则需要安装 brew，具体方法可以百度，在此不进行赘述。</p><p>也有其他的方式来安装 git，可以去百度上探索一下。</p><h2 id="在本地安装-Node-js"><a href="#在本地安装-Node-js" class="headerlink" title="在本地安装 Node.js"></a><strong>在本地安装 Node.js</strong></h2><p>Node.js 为 macOS 提供了官方的安装程序，在 Node.js 的<a href="http://nodejs.cn/download">官网下载页面</a>上即可下载。</p><h2 id="在本地安装-hexo"><a href="#在本地安装-hexo" class="headerlink" title="在本地安装 hexo"></a>在本地安装 hexo</h2><p>打开终端，输入以下命令：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>npm install -g hexo-cli </span><br></pre></td></tr></table></figure><p>安装好后，可以用以下命令执行hexo</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">npx hexo &lt;<span class="built_in">command</span>&gt;</span> </span><br></pre></td></tr></table></figure><p>如果想省略 npx 前缀，需要讲 hexo 目录下的 node_modules 添加到环境变量中。笔者比较懒，没有搞，可以参考 hexo 官方文档中的方法。</p><p>另外，hexo 官方文档中也写明了 hexo 对 node.js 的版本限制。</p><blockquote><p>若在这里如果出现以下错误</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="variable constant_">ERR</span>! <span class="title class_">Error</span>: <span class="attr">EACCES</span>: permission denied, access <span class="string">&#x27;/usr/lib/node_modules&#x27;</span></span><br><span class="line"></span><br><span class="line">npm <span class="variable constant_">ERR</span>! &#123; <span class="title class_">Error</span>: <span class="attr">EACCES</span>: permission denied, access <span class="string">&#x27;/usr/lib/node_modules&#x27;</span></span><br><span class="line"></span><br><span class="line">npm <span class="variable constant_">ERR</span>!  <span class="attr">stack</span>: <span class="string">&#x27;Error: EACCES: permission denied, access \&#x27;/usr/lib/node_modules\&#x27;&#x27;</span>,</span><br><span class="line"></span><br><span class="line">npm <span class="variable constant_">ERR</span>!  <span class="attr">errno</span>: -<span class="number">13</span>,</span><br><span class="line"></span><br><span class="line">npm <span class="variable constant_">ERR</span>!  <span class="attr">code</span>: <span class="string">&#x27;EACCES&#x27;</span>,</span><br><span class="line"></span><br><span class="line">npm <span class="variable constant_">ERR</span>!  <span class="attr">syscall</span>: <span class="string">&#x27;access&#x27;</span>,</span><br><span class="line"></span><br><span class="line">npm <span class="variable constant_">ERR</span>!  <span class="attr">path</span>: <span class="string">&#x27;/usr/lib/node_modules&#x27;</span> &#125;</span><br></pre></td></tr></table></figure><p>则可以用以下方法解决，在命令行中依次输入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">mkdir</span> ~/.npm-global</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">npm config <span class="built_in">set</span> prefix <span class="string">&#x27;~/.npm-global&#x27;</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">export</span> PATH=~/.npm-global/bin:<span class="variable">$PATH</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">npm install -g hexo</span></span><br></pre></td></tr></table></figure></blockquote><h2 id="GitHub-的一系列设置"><a href="#GitHub-的一系列设置" class="headerlink" title="GitHub 的一系列设置"></a><strong>GitHub 的一系列设置</strong></h2><h3 id="1-生成-ssh-key"><a href="#1-生成-ssh-key" class="headerlink" title="1. 生成 ssh key"></a><strong>1. 生成 ssh key</strong></h3><p>macOS 是自带 ssh 的，因此不用安装。在此只要生成本机的 ssh key 即可。</p><p>打开终端，输入以下命令：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>ssh-keyget -t rsa -C <span class="string">&quot;yourMailAddress&quot;</span> </span><br></pre></td></tr></table></figure><p>执行后按四次回车，不用输入任何命令。</p><p>在用户根目录下显示隐藏文件，找到 <code>.ssh</code> 文件，打开 <code>id_rsa.pub</code>，复制其内容至剪切板。</p><blockquote><p>macOS 下显示隐藏文件方法为 shift + command + 。</p></blockquote><h3 id="2-设置-GitHub-SSH-Keys"><a href="#2-设置-GitHub-SSH-Keys" class="headerlink" title="2. 设置 GitHub SSH Keys"></a><strong>2. 设置 GitHub SSH Keys</strong></h3><p>打开 GitHub 网站，进入 <code>Settings</code>，选择 <code>SSH and GPG keys</code> 选项卡。</p><p>在 <code>Title</code> 中输入你想要的称呼，将剪切板中的内容复制到 <code>key</code> 中。</p><p>点击 <code>Add SSH key</code> 按钮。</p><p>回到终端，在终端中输入以下命令：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>ssh -T git<span class="variable">@github</span>.com </span><br></pre></td></tr></table></figure><h2 id="安装自动部署发布工具"><a href="#安装自动部署发布工具" class="headerlink" title="安装自动部署发布工具"></a><strong>安装自动部署发布工具</strong></h2><p>打开终端，输入以下命令：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-deployer-git <span class="comment">--save</span></span><br></pre></td></tr></table></figure><p>安装完毕即可。</p><hr><h1 id="本地建站"><a href="#本地建站" class="headerlink" title="本地建站"></a><strong>本地建站</strong></h1><h2 id="hexo-生成文件"><a href="#hexo-生成文件" class="headerlink" title="hexo 生成文件"></a><strong>hexo 生成文件</strong></h2><p>设置好以上内容后，在你想要的位置新建一个文件夹，在文件夹中打开终端，输入以下命令：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npx hexo <span class="keyword">init</span> </span><br></pre></td></tr></table></figure><p>hero 将会在终端所在的文件夹中新建所需要的文件。</p><p>新建完成后，指定文件夹的目录如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── _config.yml</span><br><span class="line">├── package.json</span><br><span class="line">├── scaffolds</span><br><span class="line">├── <span class="built_in">source</span></span><br><span class="line">|   ├── _drafts</span><br><span class="line">|   └── _posts</span><br><span class="line">└── themes</span><br></pre></td></tr></table></figure><p>在终端输入以下命令可以生成页面：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>npx hexo g </span><br></pre></td></tr></table></figure><p>在终端输入以下命令可以在本地服务器进行预览：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>npx hexo s </span><br></pre></td></tr></table></figure><p>打开浏览器，输入 <code>localhost:4000</code> 即可看到博客的预览。</p><blockquote><p>如果 hexo s 命令有以下报错：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">TypeError</span>: <span class="title class_">Cannot</span> read property <span class="string">&#x27;utcOffset&#x27;</span> <span class="keyword">of</span> <span class="literal">null</span></span><br></pre></td></tr></table></figure><p>说明你和笔者一样手欠，在 <code>_config.yml</code> 文件中将时区 <code>timezone</code> 改成了什么乱七八糟的地方。重新改成 <code> Asia/Shanghai</code>就解决了。</p></blockquote><h2 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a><strong>修改配置文件</strong></h2><p>打开 <code>_config.yml</code> 文件，在最后添加以下内容：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line"></span><br><span class="line">    <span class="built_in">type</span>: git</span><br><span class="line"></span><br><span class="line">    repo: https://github.com/<span class="string">&quot;yourGithubName&quot;</span>/<span class="string">&quot;yourGithubName&quot;</span>.github.<span class="built_in">io</span>.git</span><br><span class="line"></span><br><span class="line">    branch: main </span><br></pre></td></tr></table></figure><blockquote><p>这里注意一定缩进要打满4个空格，英文冒号后面也要跟一个空格</p></blockquote><p>修改完毕后保存。</p><blockquote><p>这里你可以自己捣鼓一下，找一个现成的主题或者自己写一个主题。具体的美化工作就看你的想法了。hexo 的一系列操作可以参考 hexo 的<a href="https://hexo.io/zh-cn/docs/">官方文档</a>。</p></blockquote><hr><h1 id="部署-GitHub-pages"><a href="#部署-GitHub-pages" class="headerlink" title="部署 GitHub pages"></a><strong>部署 GitHub pages</strong></h1><h2 id="在-GitHub-上申请令牌"><a href="#在-GitHub-上申请令牌" class="headerlink" title="在 GitHub 上申请令牌"></a><strong>在 GitHub 上申请令牌</strong></h2><p>打开 GitHub 上的 <code>Settings</code>，选择 <code>Developer settings</code> 选项卡，然后选择 <code>Personnal access tokens</code> 选项卡。</p><p>点击 <code>Generate new token</code> 按钮，输入密码。</p><p>在新建令牌页面中选择所有的权限（其实不用全选，但是笔者懒得挑了）。</p><p>点击生成令牌，在接下来的页面中截图或者复制得到的令牌，令牌只会出现一次，一定要记住。</p><h2 id="将博客部署到-GitHub-上"><a href="#将博客部署到-GitHub-上" class="headerlink" title="将博客部署到 GitHub 上"></a><strong>将博客部署到 GitHub 上</strong></h2><p>在存有本地页面的文件夹中打开终端，输入以下命令：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>npx hexo g</span><br><span class="line"></span><br><span class="line"><span class="variable">$ </span>npx hexo d </span><br></pre></td></tr></table></figure><p>依次输入 GitHub 的用户名和申请的令牌。</p><blockquote><p>这里经常会失败，GitHub 的网站在国内还是8太行</p></blockquote><p>成功之后，我们所有的工作就基本完成了，打开博客的仓库，点击 <code>Settings</code>，找到 <code>Pages</code> 选项卡，点击确认，博客就在 GitHub 上成功发布了。博客的网址就是仓库的名称，即 <code>https://“yourGithubName&quot;.github.io</code>。</p><hr><h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a><strong>最后</strong></h1><p>写到这里这篇文章也就结束了，笔者只是记录一下自己搭建个人博客的一个过程，以后也会在这个博客上继续分享个人的学习经历。如果你感兴趣的话，欢迎持续关注。</p>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
